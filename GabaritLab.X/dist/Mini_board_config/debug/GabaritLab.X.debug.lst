

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Nov 28 12:04:12 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F45K20
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43  0000                     
    44                           ; Version 2.10
    45                           ; Generated 31/07/2019 GMT
    46                           ; 
    47                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F45K20 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMRAM
    80  0071C0                     __pidataCOMRAM:
    81                           	opt callstack 0
    82                           
    83                           ;initializer for _randx
    84  0071C0  0001               	dw	1
    85  0071C2  0000               	dw	0
    86                           
    87                           	psect	idataBANK0
    88  007354                     __pidataBANK0:
    89                           	opt callstack 0
    90                           
    91                           ;initializer for _matCGRAM
    92  007354  08                 	db	8
    93  007355  04                 	db	4
    94  007356  04                 	db	4
    95  007357  0A                 	db	10
    96  007358  11                 	db	17
    97  007359  1F                 	db	31
    98  00735A  11                 	db	17
    99  00735B  00                 	db	0
   100  00735C  04                 	db	4
   101  00735D  04                 	db	4
   102  00735E  1B                 	db	27
   103  00735F  04                 	db	4
   104  007360  04                 	db	4
   105  007361  1B                 	db	27
   106  007362  04                 	db	4
   107  007363  04                 	db	4
   108  007364  0E                 	db	14
   109  007365  1F                 	db	31
   110  007366  1F                 	db	31
   111  007367  1F                 	db	31
   112  007368  1F                 	db	31
   113  007369  1F                 	db	31
   114  00736A  1F                 	db	31
   115  00736B  0E                 	db	14
   116  00736C  00                 	db	0
   117  00736D  00                 	db	0
   118  00736E  15                 	db	21
   119  00736F  0E                 	db	14
   120  007370  1B                 	db	27
   121  007371  0E                 	db	14
   122  007372  15                 	db	21
   123  007373  00                 	db	0
   124  007374  08                 	db	8
   125  007375  04                 	db	4
   126  007376  1F                 	db	31
   127  007377  10                 	db	16
   128  007378  1E                 	db	30
   129  007379  10                 	db	16
   130  00737A  1F                 	db	31
   131  00737B  00                 	db	0
   132  00737C  04                 	db	4
   133  00737D  0A                 	db	10
   134  00737E  0E                 	db	14
   135  00737F  11                 	db	17
   136  007380  1F                 	db	31
   137  007381  10                 	db	16
   138  007382  0E                 	db	14
   139  007383  00                 	db	0
   140  007384  08                 	db	8
   141  007385  04                 	db	4
   142  007386  0E                 	db	14
   143  007387  01                 	db	1
   144  007388  0F                 	db	15
   145  007389  11                 	db	17
   146  00738A  0F                 	db	15
   147  00738B  00                 	db	0
   148  00738C  04                 	db	4
   149  00738D  0A                 	db	10
   150  00738E  0E                 	db	14
   151  00738F  01                 	db	1
   152  007390  0F                 	db	15
   153  007391  11                 	db	17
   154  007392  0F                 	db	15
   155  007393  00                 	db	0
   156  0000                     _PORTAbits	set	3968
   157  0000                     _PORTD	set	3971
   158  0000                     _ANSELbits	set	3966
   159  0000                     _TRISA	set	3986
   160  0000                     _ANSEL	set	3966
   161  0000                     _TRISB	set	3987
   162  0000                     _ANSELH	set	3967
   163  0000                     _TRISD	set	3989
   164  0000                     _TMR1	set	4046
   165  0000                     _ADCON2bits	set	4032
   166  0000                     _ADCON1	set	4033
   167  0000                     _T1CONbits	set	4045
   168  0000                     _ADRESH	set	4036
   169  0000                     _ADCON0bits	set	4034
   170                           
   171                           ; #config settings
   172  0000                     
   173                           	psect	cinit
   174  0075AC                     __pcinit:
   175                           	opt callstack 0
   176  0075AC                     start_initialization:
   177                           	opt callstack 0
   178  0075AC                     __initialization:
   179                           	opt callstack 0
   180                           
   181                           ; Initialize objects allocated to BANK0 (64 bytes)
   182                           ; load TBLPTR registers with __pidataBANK0
   183  0075AC  0E54               	movlw	low __pidataBANK0
   184  0075AE  6EF6               	movwf	tblptrl,c
   185  0075B0  0E73               	movlw	high __pidataBANK0
   186  0075B2  6EF7               	movwf	tblptrh,c
   187  0075B4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   188  0075B6  6EF8               	movwf	tblptru,c
   189  0075B8  EE00  F0B4         	lfsr	0,__pdataBANK0
   190  0075BC  EE10 F040          	lfsr	1,64
   191  0075C0                     copy_data0:
   192  0075C0  0009               	tblrd		*+
   193  0075C2  CFF5 FFEE          	movff	tablat,postinc0
   194  0075C6  50E5               	movf	postdec1,w,c
   195  0075C8  50E1               	movf	fsr1l,w,c
   196  0075CA  E1FA               	bnz	copy_data0
   197                           
   198                           ; Initialize objects allocated to COMRAM (4 bytes)
   199                           ; load TBLPTR registers with __pidataCOMRAM
   200  0075CC  0EC0               	movlw	low __pidataCOMRAM
   201  0075CE  6EF6               	movwf	tblptrl,c
   202  0075D0  0E71               	movlw	high __pidataCOMRAM
   203  0075D2  6EF7               	movwf	tblptrh,c
   204  0075D4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   205  0075D6  6EF8               	movwf	tblptru,c
   206  0075D8  EE00  F025         	lfsr	0,__pdataCOMRAM
   207  0075DC  EE10 F004          	lfsr	1,4
   208  0075E0                     copy_data1:
   209  0075E0  0009               	tblrd		*+
   210  0075E2  CFF5 FFEE          	movff	tablat,postinc0
   211  0075E6  50E5               	movf	postdec1,w,c
   212  0075E8  50E1               	movf	fsr1l,w,c
   213  0075EA  E1FA               	bnz	copy_data1
   214                           
   215                           ; Clear objects allocated to BANK1 (84 bytes)
   216  0075EC  EE01  F000         	lfsr	0,__pbssBANK1
   217  0075F0  0E54               	movlw	84
   218  0075F2                     clear_0:
   219  0075F2  6AEE               	clrf	postinc0,c
   220  0075F4  06E8               	decf	wreg,f,c
   221  0075F6  E1FD               	bnz	clear_0
   222                           
   223                           ; Clear objects allocated to BANK0 (84 bytes)
   224  0075F8  EE00  F060         	lfsr	0,__pbssBANK0
   225  0075FC  0E54               	movlw	84
   226  0075FE                     clear_1:
   227  0075FE  6AEE               	clrf	postinc0,c
   228  007600  06E8               	decf	wreg,f,c
   229  007602  E1FD               	bnz	clear_1
   230  007604                     end_of_initialization:
   231                           	opt callstack 0
   232  007604                     __end_of__initialization:
   233                           	opt callstack 0
   234  007604  0E00               	movlw	low (__Lmediumconst shr (0+16))
   235  007606  6EF8               	movwf	tblptru,c
   236  007608  0100               	movlb	0
   237  00760A  EF76  F03A         	goto	_main	;jump to C main() function
   238                           
   239                           	psect	dataCOMRAM
   240  000025                     __pdataCOMRAM:
   241                           	opt callstack 0
   242  000025                     _randx:
   243                           	opt callstack 0
   244  000025                     	ds	4
   245                           
   246                           	psect	bssBANK0
   247  000060                     __pbssBANK0:
   248                           	opt callstack 0
   249  000060                     _m_tabMines:
   250                           	opt callstack 0
   251  000060                     	ds	84
   252                           
   253                           	psect	dataBANK0
   254  0000B4                     __pdataBANK0:
   255                           	opt callstack 0
   256  0000B4                     _matCGRAM:
   257                           	opt callstack 0
   258  0000B4                     	ds	64
   259                           
   260                           	psect	bssBANK1
   261  000100                     __pbssBANK1:
   262                           	opt callstack 0
   263  000100                     _m_tabVue:
   264                           	opt callstack 0
   265  000100                     	ds	84
   266                           
   267                           	psect	cstackCOMRAM
   268  000001                     __pcstackCOMRAM:
   269                           	opt callstack 0
   270  000001                     ??_getAnalog:
   271  000001                     ??_lcd_ecrireDonnees:
   272  000001                     ??_lcd_busy:
   273  000001                     ?___wmul:
   274                           	opt callstack 0
   275  000001                     ?___lmul:
   276                           	opt callstack 0
   277  000001                     ___wmul@multiplier:
   278                           	opt callstack 0
   279  000001                     srand@x:
   280                           	opt callstack 0
   281  000001                     ___lmul@multiplier:
   282                           	opt callstack 0
   283                           
   284                           ; 4 bytes @ 0x0
   285  000001                     	ds	1
   286  000002                     getAnalog@canal:
   287                           	opt callstack 0
   288  000002                     lcd_ecrireDonnees@donnee:
   289                           	opt callstack 0
   290  000002                     lcd_busy@adresse:
   291                           	opt callstack 0
   292                           
   293                           ; 1 bytes @ 0x1
   294  000002                     	ds	1
   295  000003                     ??_lcd_resetSequence:
   296  000003                     lcd_wrCom@commande:
   297                           	opt callstack 0
   298  000003                     lcd_wrData@caractere:
   299                           	opt callstack 0
   300  000003                     ___wmul@multiplicand:
   301                           	opt callstack 0
   302                           
   303                           ; 2 bytes @ 0x2
   304  000003                     	ds	1
   305  000004                     ??_lcd_initCGRam:
   306  000004                     lcd_gotoXY@y:
   307                           	opt callstack 0
   308  000004                     lcd_ecritChar@car:
   309                           	opt callstack 0
   310                           
   311                           ; 1 bytes @ 0x3
   312  000004                     	ds	1
   313  000005                     lcd_gotoXY@x:
   314                           	opt callstack 0
   315  000005                     lcd_ecritChar@posRam:
   316                           	opt callstack 0
   317  000005                     ___wmul@product:
   318                           	opt callstack 0
   319  000005                     ___lmul@multiplicand:
   320                           	opt callstack 0
   321                           
   322                           ; 4 bytes @ 0x4
   323  000005                     	ds	1
   324  000006                     lcd_initCGRam@i:
   325                           	opt callstack 0
   326  000006                     deplace@px:
   327                           	opt callstack 0
   328                           
   329                           ; 2 bytes @ 0x5
   330  000006                     	ds	1
   331  000007                     ??_initTabVue:
   332  000007                     lcd_initCGRam@j:
   333                           	opt callstack 0
   334  000007                     calculToucheCombien@ligne:
   335                           	opt callstack 0
   336  000007                     lcd_putMessage@chaine:
   337                           	opt callstack 0
   338                           
   339                           ; 2 bytes @ 0x6
   340  000007                     	ds	1
   341  000008                     deplace@py:
   342                           	opt callstack 0
   343                           
   344                           ; 2 bytes @ 0x7
   345  000008                     	ds	1
   346  000009                     lcd_putMessage@j:
   347                           	opt callstack 0
   348  000009                     initTabVue@j:
   349                           	opt callstack 0
   350  000009                     calculToucheCombien@colonne:
   351                           	opt callstack 0
   352  000009                     ___lmul@product:
   353                           	opt callstack 0
   354                           
   355                           ; 4 bytes @ 0x8
   356  000009                     	ds	1
   357  00000A                     ??_deplace:
   358  00000A                     afficheTabVue@i:
   359                           	opt callstack 0
   360                           
   361                           ; 2 bytes @ 0x9
   362  00000A                     	ds	1
   363  00000B                     ??_calculToucheCombien:
   364  00000B                     initTabVue@i:
   365                           	opt callstack 0
   366                           
   367                           ; 2 bytes @ 0xA
   368  00000B                     	ds	1
   369  00000C                     deplace@aX:
   370                           	opt callstack 0
   371                           
   372                           ; 2 bytes @ 0xB
   373  00000C                     	ds	1
   374  00000D                     ?_rand:
   375                           	opt callstack 0
   376                           
   377                           ; 2 bytes @ 0xC
   378  00000D                     	ds	1
   379  00000E                     calculToucheCombien@total:
   380                           	opt callstack 0
   381  00000E                     deplace@aY:
   382                           	opt callstack 0
   383                           
   384                           ; 2 bytes @ 0xD
   385  00000E                     	ds	1
   386  00000F                     ?___awmod:
   387                           	opt callstack 0
   388  00000F                     calculToucheCombien@x:
   389                           	opt callstack 0
   390  00000F                     ___awmod@dividend:
   391                           	opt callstack 0
   392                           
   393                           ; 2 bytes @ 0xE
   394  00000F                     	ds	2
   395  000011                     calculToucheCombien@y:
   396                           	opt callstack 0
   397  000011                     ___awmod@divisor:
   398                           	opt callstack 0
   399                           
   400                           ; 2 bytes @ 0x10
   401  000011                     	ds	2
   402  000013                     ___awmod@counter:
   403                           	opt callstack 0
   404  000013                     calculToucheCombien@i:
   405                           	opt callstack 0
   406                           
   407                           ; 2 bytes @ 0x12
   408  000013                     	ds	1
   409  000014                     ___awmod@sign:
   410                           	opt callstack 0
   411                           
   412                           ; 1 bytes @ 0x13
   413  000014                     	ds	1
   414  000015                     rempliMines@nb:
   415                           	opt callstack 0
   416  000015                     calculToucheCombien@j:
   417                           	opt callstack 0
   418                           
   419                           ; 2 bytes @ 0x14
   420  000015                     	ds	2
   421  000017                     ??_rempliMines:
   422  000017                     ??_metToucheCombien:
   423                           
   424                           ; 1 bytes @ 0x16
   425  000017                     	ds	3
   426  00001A                     rempliMines@i_299:
   427                           	opt callstack 0
   428  00001A                     metToucheCombien@i:
   429                           	opt callstack 0
   430                           
   431                           ; 2 bytes @ 0x19
   432  00001A                     	ds	2
   433  00001C                     rempliMines@col:
   434                           	opt callstack 0
   435  00001C                     metToucheCombien@j:
   436                           	opt callstack 0
   437                           
   438                           ; 2 bytes @ 0x1B
   439  00001C                     	ds	1
   440  00001D                     rempliMines@ligne:
   441                           	opt callstack 0
   442                           
   443                           ; 1 bytes @ 0x1C
   444  00001D                     	ds	1
   445  00001E                     rempliMines@i:
   446                           	opt callstack 0
   447                           
   448                           ; 2 bytes @ 0x1D
   449  00001E                     	ds	2
   450  000020                     rempliMines@j:
   451                           	opt callstack 0
   452                           
   453                           ; 2 bytes @ 0x1F
   454  000020                     	ds	2
   455  000022                     ??_main:
   456                           
   457                           ; 1 bytes @ 0x21
   458  000022                     	ds	1
   459  000023                     main@x:
   460                           	opt callstack 0
   461                           
   462                           ; 1 bytes @ 0x22
   463  000023                     	ds	1
   464  000024                     main@y:
   465                           	opt callstack 0
   466                           
   467                           ; 1 bytes @ 0x23
   468  000024                     	ds	1
   469                           
   470 ;;
   471 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   472 ;;
   473 ;; *************** function _main *****************
   474 ;; Defined at:
   475 ;;		line 54 in file "main.c"
   476 ;; Parameters:    Size  Location     Type
   477 ;;		None
   478 ;; Auto vars:     Size  Location     Type
   479 ;;  y               1   35[COMRAM] unsigned char 
   480 ;;  x               1   34[COMRAM] unsigned char 
   481 ;; Return value:  Size  Location     Type
   482 ;;                  1    wreg      void 
   483 ;; Registers used:
   484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   490 ;;      Params:         0       0       0       0       0       0       0
   491 ;;      Locals:         2       0       0       0       0       0       0
   492 ;;      Temps:          1       0       0       0       0       0       0
   493 ;;      Totals:         3       0       0       0       0       0       0
   494 ;;Total ram usage:        3 bytes
   495 ;; Hardware stack levels required when called:    6
   496 ;; This function calls:
   497 ;;		_afficheTabVue
   498 ;;		_deplace
   499 ;;		_initTabVue
   500 ;;		_initialisation
   501 ;;		_lcd_curseurHome
   502 ;;		_lcd_effaceAffichage
   503 ;;		_lcd_init
   504 ;;		_metToucheCombien
   505 ;;		_rempliMines
   506 ;; This function is called by:
   507 ;;		Startup code after reset
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511                           	psect	text0
   512  0074EC                     __ptext0:
   513                           	opt callstack 0
   514  0074EC                     _main:
   515                           	opt callstack 25
   516  0074EC                     
   517                           ;main.c: 56: char x = 0;
   518  0074EC  0E00               	movlw	0
   519  0074EE  6E23               	movwf	main@x^0,c
   520                           
   521                           ;main.c: 57: char y = 0;
   522  0074F0  0E00               	movlw	0
   523  0074F2  6E24               	movwf	main@y^0,c
   524  0074F4                     
   525                           ;main.c: 59: initialisation();
   526  0074F4  EC57  F039         	call	_initialisation	;wreg free
   527  0074F8                     
   528                           ;main.c: 60: lcd_init();
   529  0074F8  EC2C  F039         	call	_lcd_init	;wreg free
   530  0074FC                     
   531                           ;main.c: 62: lcd_effaceAffichage();
   532  0074FC  ECED  F038         	call	_lcd_effaceAffichage	;wreg free
   533  007500                     
   534                           ;main.c: 63: lcd_curseurHome();
   535  007500  ECE9  F038         	call	_lcd_curseurHome	;wreg free
   536  007504                     
   537                           ;main.c: 65: initTabVue();
   538  007504  ECA1  F03B         	call	_initTabVue	;wreg free
   539  007508                     
   540                           ;main.c: 66: rempliMines(15);
   541  007508  0E00               	movlw	0
   542  00750A  6E16               	movwf	(rempliMines@nb+1)^0,c
   543  00750C  0E0F               	movlw	15
   544  00750E  6E15               	movwf	rempliMines@nb^0,c
   545  007510  ECBD  F03C         	call	_rempliMines	;wreg free
   546  007514                     
   547                           ;main.c: 67: metToucheCombien();
   548  007514  EC4E  F03C         	call	_metToucheCombien	;wreg free
   549  007518                     
   550                           ;main.c: 68: afficheTabVue();
   551  007518  EC19  F03A         	call	_afficheTabVue	;wreg free
   552  00751C                     l1978:
   553                           
   554                           ;main.c: 71: {;main.c: 72: deplace(&x, &y);
   555  00751C  0E23               	movlw	low main@x
   556  00751E  6E06               	movwf	deplace@px^0,c
   557  007520  0E00               	movlw	high main@x
   558  007522  6E07               	movwf	(deplace@px+1)^0,c
   559  007524  0E24               	movlw	low main@y
   560  007526  6E08               	movwf	deplace@py^0,c
   561  007528  0E00               	movlw	high main@y
   562  00752A  6E09               	movwf	(deplace@py+1)^0,c
   563  00752C  ECF9  F03D         	call	_deplace	;wreg free
   564  007530                     
   565                           ;main.c: 73: _delay((unsigned long)((100)*(1000000/4000.0)));
   566  007530  0E21               	movlw	33
   567  007532  6E22               	movwf	??_main^0,c
   568  007534  0E76               	movlw	118
   569  007536                     u827:
   570  007536  2EE8               	decfsz	wreg,f,c
   571  007538  D7FE               	bra	u827
   572  00753A  2E22               	decfsz	??_main^0,f,c
   573  00753C  D7FC               	bra	u827
   574  00753E  F000 F000          	nop2	
   575  007542  EF8E  F03A         	goto	l1978
   576  007546  EF00  F000         	goto	start
   577  00754A                     __end_of_main:
   578                           	opt callstack 0
   579                           
   580 ;; *************** function _rempliMines *****************
   581 ;; Defined at:
   582 ;;		line 116 in file "main.c"
   583 ;; Parameters:    Size  Location     Type
   584 ;;  nb              2   20[COMRAM] int 
   585 ;; Auto vars:     Size  Location     Type
   586 ;;  j               2   31[COMRAM] int 
   587 ;;  i               2   25[COMRAM] int 
   588 ;;  i               2   29[COMRAM] int 
   589 ;;  ligne           1   28[COMRAM] unsigned char 
   590 ;;  col             1   27[COMRAM] unsigned char 
   591 ;; Return value:  Size  Location     Type
   592 ;;                  1    wreg      void 
   593 ;; Registers used:
   594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   595 ;; Tracked objects:
   596 ;;		On entry : 0/0
   597 ;;		On exit  : 0/0
   598 ;;		Unchanged: 0/0
   599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   600 ;;      Params:         2       0       0       0       0       0       0
   601 ;;      Locals:         8       0       0       0       0       0       0
   602 ;;      Temps:          3       0       0       0       0       0       0
   603 ;;      Totals:        13       0       0       0       0       0       0
   604 ;;Total ram usage:       13 bytes
   605 ;; Hardware stack levels used:    1
   606 ;; Hardware stack levels required when called:    2
   607 ;; This function calls:
   608 ;;		___awmod
   609 ;;		___wmul
   610 ;;		_rand
   611 ;; This function is called by:
   612 ;;		_main
   613 ;; This function uses a non-reentrant model
   614 ;;
   615                           
   616                           	psect	text1
   617  00797A                     __ptext1:
   618                           	opt callstack 0
   619  00797A                     _rempliMines:
   620                           	opt callstack 28
   621  00797A                     
   622                           ;main.c: 118: char ligne = 0;
   623  00797A  0E00               	movlw	0
   624  00797C  6E1D               	movwf	rempliMines@ligne^0,c
   625                           
   626                           ;main.c: 120: for(int i = 0; i < 20; i++){
   627  00797E  0E00               	movlw	0
   628  007980  6E1F               	movwf	(rempliMines@i+1)^0,c
   629  007982  0E00               	movlw	0
   630  007984  6E1E               	movwf	rempliMines@i^0,c
   631  007986                     l1858:
   632                           
   633                           ;main.c: 121: for(int j = 0; j < 4; j++){
   634  007986  0E00               	movlw	0
   635  007988  6E21               	movwf	(rempliMines@j+1)^0,c
   636  00798A  0E00               	movlw	0
   637  00798C  6E20               	movwf	rempliMines@j^0,c
   638  00798E                     l1864:
   639                           
   640                           ;main.c: 122: m_tabMines[j][i] = 32;
   641  00798E  C020  F001         	movff	rempliMines@j,___wmul@multiplier
   642  007992  C021  F002         	movff	rempliMines@j+1,___wmul@multiplier+1
   643  007996  0E00               	movlw	0
   644  007998  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   645  00799A  0E15               	movlw	21
   646  00799C  6E03               	movwf	___wmul@multiplicand^0,c
   647  00799E  EC05  F039         	call	___wmul	;wreg free
   648  0079A2  0E60               	movlw	low _m_tabMines
   649  0079A4  6E17               	movwf	??_rempliMines^0,c
   650  0079A6  0E00               	movlw	high _m_tabMines
   651  0079A8  6E18               	movwf	(??_rempliMines+1)^0,c
   652  0079AA  5001               	movf	?___wmul^0,w,c
   653  0079AC  2617               	addwf	??_rempliMines^0,f,c
   654  0079AE  5002               	movf	(?___wmul+1)^0,w,c
   655  0079B0  2218               	addwfc	(??_rempliMines+1)^0,f,c
   656  0079B2  501E               	movf	rempliMines@i^0,w,c
   657  0079B4  2417               	addwf	??_rempliMines^0,w,c
   658  0079B6  6ED9               	movwf	fsr2l,c
   659  0079B8  501F               	movf	(rempliMines@i+1)^0,w,c
   660  0079BA  2018               	addwfc	(??_rempliMines+1)^0,w,c
   661  0079BC  6EDA               	movwf	fsr2h,c
   662  0079BE  0E20               	movlw	32
   663  0079C0  6EDF               	movwf	indf2,c
   664  0079C2  4A20               	infsnz	rempliMines@j^0,f,c
   665  0079C4  2A21               	incf	(rempliMines@j+1)^0,f,c
   666  0079C6  BE21               	btfsc	(rempliMines@j+1)^0,7,c
   667  0079C8  EFEF  F03C         	goto	u681
   668  0079CC  5021               	movf	(rempliMines@j+1)^0,w,c
   669  0079CE  E109               	bnz	u680
   670  0079D0  0E04               	movlw	4
   671  0079D2  5C20               	subwf	rempliMines@j^0,w,c
   672  0079D4  A0D8               	btfss	status,0,c
   673  0079D6  EFEF  F03C         	goto	u681
   674  0079DA  EFF1  F03C         	goto	u680
   675  0079DE                     u681:
   676  0079DE  EFC7  F03C         	goto	l1864
   677  0079E2                     u680:
   678  0079E2  4A1E               	infsnz	rempliMines@i^0,f,c
   679  0079E4  2A1F               	incf	(rempliMines@i+1)^0,f,c
   680  0079E6  BE1F               	btfsc	(rempliMines@i+1)^0,7,c
   681  0079E8  EFFF  F03C         	goto	u691
   682  0079EC  501F               	movf	(rempliMines@i+1)^0,w,c
   683  0079EE  E109               	bnz	u690
   684  0079F0  0E14               	movlw	20
   685  0079F2  5C1E               	subwf	rempliMines@i^0,w,c
   686  0079F4  A0D8               	btfss	status,0,c
   687  0079F6  EFFF  F03C         	goto	u691
   688  0079FA  EF01  F03D         	goto	u690
   689  0079FE                     u691:
   690  0079FE  EFC3  F03C         	goto	l1858
   691  007A02                     u690:
   692  007A02                     
   693                           ;main.c: 123: };main.c: 124: };main.c: 126: for(int i = 0; i < nb; i++){
   694  007A02  0E00               	movlw	0
   695  007A04  6E1B               	movwf	(rempliMines@i_299+1)^0,c
   696  007A06  0E00               	movlw	0
   697  007A08  6E1A               	movwf	rempliMines@i_299^0,c
   698  007A0A  EF47  F03D         	goto	l1884
   699  007A0E                     l1876:
   700                           
   701                           ;main.c: 128: col = rand()%20;
   702  007A0E  ECF0  F039         	call	_rand	;wreg free
   703  007A12  C00D  F00F         	movff	?_rand,___awmod@dividend
   704  007A16  C00E  F010         	movff	?_rand+1,___awmod@dividend+1
   705  007A1A  0E00               	movlw	0
   706  007A1C  6E12               	movwf	(___awmod@divisor+1)^0,c
   707  007A1E  0E14               	movlw	20
   708  007A20  6E11               	movwf	___awmod@divisor^0,c
   709  007A22  ECF6  F03B         	call	___awmod	;wreg free
   710  007A26  500F               	movf	?___awmod^0,w,c
   711  007A28  6E1C               	movwf	rempliMines@col^0,c
   712                           
   713                           ;main.c: 129: ligne = rand()%4;
   714  007A2A  ECF0  F039         	call	_rand	;wreg free
   715  007A2E  500D               	movf	?_rand^0,w,c
   716  007A30  0B03               	andlw	3
   717  007A32  6E1D               	movwf	rempliMines@ligne^0,c
   718  007A34                     
   719                           ;main.c: 130: }while(m_tabMines[ligne][col] != 32);
   720  007A34  501D               	movf	rempliMines@ligne^0,w,c
   721  007A36  0D15               	mullw	21
   722  007A38  0E60               	movlw	low _m_tabMines
   723  007A3A  6E17               	movwf	??_rempliMines^0,c
   724  007A3C  0E00               	movlw	high _m_tabMines
   725  007A3E  6E18               	movwf	(??_rempliMines+1)^0,c
   726  007A40  50F3               	movf	243,w,c
   727  007A42  2617               	addwf	??_rempliMines^0,f,c
   728  007A44  50F4               	movf	244,w,c
   729  007A46  2218               	addwfc	(??_rempliMines+1)^0,f,c
   730  007A48  501C               	movf	rempliMines@col^0,w,c
   731  007A4A  2417               	addwf	??_rempliMines^0,w,c
   732  007A4C  6ED9               	movwf	fsr2l,c
   733  007A4E  0E00               	movlw	0
   734  007A50  2018               	addwfc	(??_rempliMines+1)^0,w,c
   735  007A52  6EDA               	movwf	fsr2h,c
   736  007A54  0E20               	movlw	32
   737  007A56  18DE               	xorwf	postinc2,w,c
   738  007A58  A4D8               	btfss	status,2,c
   739  007A5A  EF31  F03D         	goto	u701
   740  007A5E  EF33  F03D         	goto	u700
   741  007A62                     u701:
   742  007A62  EF07  F03D         	goto	l1876
   743  007A66                     u700:
   744  007A66                     
   745                           ;main.c: 131: m_tabMines[ligne][col] = 3;
   746  007A66  501D               	movf	rempliMines@ligne^0,w,c
   747  007A68  0D15               	mullw	21
   748  007A6A  0E60               	movlw	low _m_tabMines
   749  007A6C  6E17               	movwf	??_rempliMines^0,c
   750  007A6E  0E00               	movlw	high _m_tabMines
   751  007A70  6E18               	movwf	(??_rempliMines+1)^0,c
   752  007A72  50F3               	movf	243,w,c
   753  007A74  2617               	addwf	??_rempliMines^0,f,c
   754  007A76  50F4               	movf	244,w,c
   755  007A78  2218               	addwfc	(??_rempliMines+1)^0,f,c
   756  007A7A  501C               	movf	rempliMines@col^0,w,c
   757  007A7C  2417               	addwf	??_rempliMines^0,w,c
   758  007A7E  6ED9               	movwf	fsr2l,c
   759  007A80  0E00               	movlw	0
   760  007A82  2018               	addwfc	(??_rempliMines+1)^0,w,c
   761  007A84  6EDA               	movwf	fsr2h,c
   762  007A86  0E03               	movlw	3
   763  007A88  6EDF               	movwf	indf2,c
   764  007A8A  4A1A               	infsnz	rempliMines@i_299^0,f,c
   765  007A8C  2A1B               	incf	(rempliMines@i_299+1)^0,f,c
   766  007A8E                     l1884:
   767  007A8E  5015               	movf	rempliMines@nb^0,w,c
   768  007A90  5C1A               	subwf	rempliMines@i_299^0,w,c
   769  007A92  501B               	movf	(rempliMines@i_299+1)^0,w,c
   770  007A94  0A80               	xorlw	128
   771  007A96  6E17               	movwf	??_rempliMines^0,c
   772  007A98  5016               	movf	(rempliMines@nb+1)^0,w,c
   773  007A9A  0A80               	xorlw	128
   774  007A9C  5817               	subwfb	??_rempliMines^0,w,c
   775  007A9E  A0D8               	btfss	status,0,c
   776  007AA0  EF54  F03D         	goto	u711
   777  007AA4  EF56  F03D         	goto	u710
   778  007AA8                     u711:
   779  007AA8  EF07  F03D         	goto	l1876
   780  007AAC                     u710:
   781  007AAC  0012               	return		;funcret
   782  007AAE                     __end_of_rempliMines:
   783                           	opt callstack 0
   784                           
   785 ;; *************** function _rand *****************
   786 ;; Defined at:
   787 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;		None
   790 ;; Auto vars:     Size  Location     Type
   791 ;;		None
   792 ;; Return value:  Size  Location     Type
   793 ;;                  2   12[COMRAM] int 
   794 ;; Registers used:
   795 ;;		wreg, status,2, status,0, cstack
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   801 ;;      Params:         2       0       0       0       0       0       0
   802 ;;      Locals:         0       0       0       0       0       0       0
   803 ;;      Temps:          0       0       0       0       0       0       0
   804 ;;      Totals:         2       0       0       0       0       0       0
   805 ;;Total ram usage:        2 bytes
   806 ;; Hardware stack levels used:    1
   807 ;; Hardware stack levels required when called:    1
   808 ;; This function calls:
   809 ;;		___lmul
   810 ;; This function is called by:
   811 ;;		_rempliMines
   812 ;; This function uses a non-reentrant model
   813 ;;
   814                           
   815                           	psect	text2
   816  0073E0                     __ptext2:
   817                           	opt callstack 0
   818  0073E0                     _rand:
   819                           	opt callstack 28
   820  0073E0  C025  F001         	movff	_randx,___lmul@multiplier
   821  0073E4  C026  F002         	movff	_randx+1,___lmul@multiplier+1
   822  0073E8  C027  F003         	movff	_randx+2,___lmul@multiplier+2
   823  0073EC  C028  F004         	movff	_randx+3,___lmul@multiplier+3
   824  0073F0  0E6D               	movlw	109
   825  0073F2  6E05               	movwf	___lmul@multiplicand^0,c
   826  0073F4  0E4E               	movlw	78
   827  0073F6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
   828  0073F8  0EC6               	movlw	198
   829  0073FA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
   830  0073FC  0E41               	movlw	65
   831  0073FE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
   832  007400  EC6C  F03B         	call	___lmul	;wreg free
   833  007404  C001  F025         	movff	?___lmul,_randx
   834  007408  C002  F026         	movff	?___lmul+1,_randx+1
   835  00740C  C003  F027         	movff	?___lmul+2,_randx+2
   836  007410  C004  F028         	movff	?___lmul+3,_randx+3
   837  007414  0E39               	movlw	57
   838  007416  2625               	addwf	_randx^0,f,c
   839  007418  0E30               	movlw	48
   840  00741A  2226               	addwfc	(_randx+1)^0,f,c
   841  00741C  0E00               	movlw	0
   842  00741E  2227               	addwfc	(_randx+2)^0,f,c
   843  007420  0E00               	movlw	0
   844  007422  2228               	addwfc	(_randx+3)^0,f,c
   845  007424  0EFF               	movlw	255
   846  007426  1427               	andwf	(_randx+2)^0,w,c
   847  007428  6E0D               	movwf	?_rand^0,c
   848  00742A  0E7F               	movlw	127
   849  00742C  1428               	andwf	(_randx+3)^0,w,c
   850  00742E  6E0E               	movwf	(?_rand+1)^0,c
   851  007430  0012               	return		;funcret
   852  007432                     __end_of_rand:
   853                           	opt callstack 0
   854                           
   855 ;; *************** function ___lmul *****************
   856 ;; Defined at:
   857 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
   858 ;; Parameters:    Size  Location     Type
   859 ;;  multiplier      4    0[COMRAM] unsigned long 
   860 ;;  multiplicand    4    4[COMRAM] unsigned long 
   861 ;; Auto vars:     Size  Location     Type
   862 ;;  product         4    8[COMRAM] unsigned long 
   863 ;; Return value:  Size  Location     Type
   864 ;;                  4    0[COMRAM] unsigned long 
   865 ;; Registers used:
   866 ;;		wreg, status,2, status,0
   867 ;; Tracked objects:
   868 ;;		On entry : 0/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   872 ;;      Params:         8       0       0       0       0       0       0
   873 ;;      Locals:         4       0       0       0       0       0       0
   874 ;;      Temps:          0       0       0       0       0       0       0
   875 ;;      Totals:        12       0       0       0       0       0       0
   876 ;;Total ram usage:       12 bytes
   877 ;; Hardware stack levels used:    1
   878 ;; This function calls:
   879 ;;		Nothing
   880 ;; This function is called by:
   881 ;;		_rand
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           	psect	text3
   886  0076D8                     __ptext3:
   887                           	opt callstack 0
   888  0076D8                     ___lmul:
   889                           	opt callstack 28
   890  0076D8  0E00               	movlw	0
   891  0076DA  6E09               	movwf	___lmul@product^0,c
   892  0076DC  0E00               	movlw	0
   893  0076DE  6E0A               	movwf	(___lmul@product+1)^0,c
   894  0076E0  0E00               	movlw	0
   895  0076E2  6E0B               	movwf	(___lmul@product+2)^0,c
   896  0076E4  0E00               	movlw	0
   897  0076E6  6E0C               	movwf	(___lmul@product+3)^0,c
   898  0076E8                     l1622:
   899  0076E8  A001               	btfss	___lmul@multiplier^0,0,c
   900  0076EA  EF79  F03B         	goto	u451
   901  0076EE  EF7B  F03B         	goto	u450
   902  0076F2                     u451:
   903  0076F2  EF83  F03B         	goto	l1626
   904  0076F6                     u450:
   905  0076F6  5005               	movf	___lmul@multiplicand^0,w,c
   906  0076F8  2609               	addwf	___lmul@product^0,f,c
   907  0076FA  5006               	movf	(___lmul@multiplicand+1)^0,w,c
   908  0076FC  220A               	addwfc	(___lmul@product+1)^0,f,c
   909  0076FE  5007               	movf	(___lmul@multiplicand+2)^0,w,c
   910  007700  220B               	addwfc	(___lmul@product+2)^0,f,c
   911  007702  5008               	movf	(___lmul@multiplicand+3)^0,w,c
   912  007704  220C               	addwfc	(___lmul@product+3)^0,f,c
   913  007706                     l1626:
   914  007706  90D8               	bcf	status,0,c
   915  007708  3605               	rlcf	___lmul@multiplicand^0,f,c
   916  00770A  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
   917  00770C  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
   918  00770E  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
   919  007710  90D8               	bcf	status,0,c
   920  007712  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
   921  007714  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
   922  007716  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
   923  007718  3201               	rrcf	___lmul@multiplier^0,f,c
   924  00771A  5001               	movf	___lmul@multiplier^0,w,c
   925  00771C  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
   926  00771E  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
   927  007720  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
   928  007722  A4D8               	btfss	status,2,c
   929  007724  EF96  F03B         	goto	u461
   930  007728  EF98  F03B         	goto	u460
   931  00772C                     u461:
   932  00772C  EF74  F03B         	goto	l1622
   933  007730                     u460:
   934  007730  C009  F001         	movff	___lmul@product,?___lmul
   935  007734  C00A  F002         	movff	___lmul@product+1,?___lmul+1
   936  007738  C00B  F003         	movff	___lmul@product+2,?___lmul+2
   937  00773C  C00C  F004         	movff	___lmul@product+3,?___lmul+3
   938  007740  0012               	return		;funcret
   939  007742                     __end_of___lmul:
   940                           	opt callstack 0
   941                           
   942 ;; *************** function ___awmod *****************
   943 ;; Defined at:
   944 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;  dividend        2   14[COMRAM] int 
   947 ;;  divisor         2   16[COMRAM] int 
   948 ;; Auto vars:     Size  Location     Type
   949 ;;  sign            1   19[COMRAM] unsigned char 
   950 ;;  counter         1   18[COMRAM] unsigned char 
   951 ;; Return value:  Size  Location     Type
   952 ;;                  2   14[COMRAM] int 
   953 ;; Registers used:
   954 ;;		wreg, status,2, status,0
   955 ;; Tracked objects:
   956 ;;		On entry : 0/0
   957 ;;		On exit  : 0/0
   958 ;;		Unchanged: 0/0
   959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   960 ;;      Params:         4       0       0       0       0       0       0
   961 ;;      Locals:         2       0       0       0       0       0       0
   962 ;;      Temps:          0       0       0       0       0       0       0
   963 ;;      Totals:         6       0       0       0       0       0       0
   964 ;;Total ram usage:        6 bytes
   965 ;; Hardware stack levels used:    1
   966 ;; This function calls:
   967 ;;		Nothing
   968 ;; This function is called by:
   969 ;;		_rempliMines
   970 ;; This function uses a non-reentrant model
   971 ;;
   972                           
   973                           	psect	text4
   974  0077EC                     __ptext4:
   975                           	opt callstack 0
   976  0077EC                     ___awmod:
   977                           	opt callstack 29
   978  0077EC  0E00               	movlw	0
   979  0077EE  6E14               	movwf	___awmod@sign^0,c
   980  0077F0  BE10               	btfsc	(___awmod@dividend+1)^0,7,c
   981  0077F2  EFFF  F03B         	goto	u600
   982  0077F6  EFFD  F03B         	goto	u601
   983  0077FA                     u601:
   984  0077FA  EF05  F03C         	goto	l1776
   985  0077FE                     u600:
   986  0077FE  6C0F               	negf	___awmod@dividend^0,c
   987  007800  1E10               	comf	(___awmod@dividend+1)^0,f,c
   988  007802  B0D8               	btfsc	status,0,c
   989  007804  2A10               	incf	(___awmod@dividend+1)^0,f,c
   990  007806  0E01               	movlw	1
   991  007808  6E14               	movwf	___awmod@sign^0,c
   992  00780A                     l1776:
   993  00780A  BE12               	btfsc	(___awmod@divisor+1)^0,7,c
   994  00780C  EF0C  F03C         	goto	u610
   995  007810  EF0A  F03C         	goto	u611
   996  007814                     u611:
   997  007814  EF10  F03C         	goto	l1780
   998  007818                     u610:
   999  007818  6C11               	negf	___awmod@divisor^0,c
  1000  00781A  1E12               	comf	(___awmod@divisor+1)^0,f,c
  1001  00781C  B0D8               	btfsc	status,0,c
  1002  00781E  2A12               	incf	(___awmod@divisor+1)^0,f,c
  1003  007820                     l1780:
  1004  007820  5011               	movf	___awmod@divisor^0,w,c
  1005  007822  1012               	iorwf	(___awmod@divisor+1)^0,w,c
  1006  007824  B4D8               	btfsc	status,2,c
  1007  007826  EF17  F03C         	goto	u621
  1008  00782A  EF19  F03C         	goto	u620
  1009  00782E                     u621:
  1010  00782E  EF3D  F03C         	goto	l1796
  1011  007832                     u620:
  1012  007832  0E01               	movlw	1
  1013  007834  6E13               	movwf	___awmod@counter^0,c
  1014  007836  EF21  F03C         	goto	l1786
  1015  00783A                     l1784:
  1016  00783A  90D8               	bcf	status,0,c
  1017  00783C  3611               	rlcf	___awmod@divisor^0,f,c
  1018  00783E  3612               	rlcf	(___awmod@divisor+1)^0,f,c
  1019  007840  2A13               	incf	___awmod@counter^0,f,c
  1020  007842                     l1786:
  1021  007842  AE12               	btfss	(___awmod@divisor+1)^0,7,c
  1022  007844  EF26  F03C         	goto	u631
  1023  007848  EF28  F03C         	goto	u630
  1024  00784C                     u631:
  1025  00784C  EF1D  F03C         	goto	l1784
  1026  007850                     u630:
  1027  007850                     l1788:
  1028  007850  5011               	movf	___awmod@divisor^0,w,c
  1029  007852  5C0F               	subwf	___awmod@dividend^0,w,c
  1030  007854  5012               	movf	(___awmod@divisor+1)^0,w,c
  1031  007856  5810               	subwfb	(___awmod@dividend+1)^0,w,c
  1032  007858  A0D8               	btfss	status,0,c
  1033  00785A  EF31  F03C         	goto	u641
  1034  00785E  EF33  F03C         	goto	u640
  1035  007862                     u641:
  1036  007862  EF37  F03C         	goto	l1792
  1037  007866                     u640:
  1038  007866  5011               	movf	___awmod@divisor^0,w,c
  1039  007868  5E0F               	subwf	___awmod@dividend^0,f,c
  1040  00786A  5012               	movf	(___awmod@divisor+1)^0,w,c
  1041  00786C  5A10               	subwfb	(___awmod@dividend+1)^0,f,c
  1042  00786E                     l1792:
  1043  00786E  90D8               	bcf	status,0,c
  1044  007870  3212               	rrcf	(___awmod@divisor+1)^0,f,c
  1045  007872  3211               	rrcf	___awmod@divisor^0,f,c
  1046  007874  2E13               	decfsz	___awmod@counter^0,f,c
  1047  007876  EF28  F03C         	goto	l1788
  1048  00787A                     l1796:
  1049  00787A  5014               	movf	___awmod@sign^0,w,c
  1050  00787C  B4D8               	btfsc	status,2,c
  1051  00787E  EF43  F03C         	goto	u651
  1052  007882  EF45  F03C         	goto	u650
  1053  007886                     u651:
  1054  007886  EF49  F03C         	goto	l1800
  1055  00788A                     u650:
  1056  00788A  6C0F               	negf	___awmod@dividend^0,c
  1057  00788C  1E10               	comf	(___awmod@dividend+1)^0,f,c
  1058  00788E  B0D8               	btfsc	status,0,c
  1059  007890  2A10               	incf	(___awmod@dividend+1)^0,f,c
  1060  007892                     l1800:
  1061  007892  C00F  F00F         	movff	___awmod@dividend,?___awmod
  1062  007896  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  1063  00789A  0012               	return		;funcret
  1064  00789C                     __end_of___awmod:
  1065                           	opt callstack 0
  1066                           
  1067 ;; *************** function _metToucheCombien *****************
  1068 ;; Defined at:
  1069 ;;		line 144 in file "main.c"
  1070 ;; Parameters:    Size  Location     Type
  1071 ;;		None
  1072 ;; Auto vars:     Size  Location     Type
  1073 ;;  j               2   27[COMRAM] int 
  1074 ;;  i               2   25[COMRAM] int 
  1075 ;; Return value:  Size  Location     Type
  1076 ;;                  1    wreg      void 
  1077 ;; Registers used:
  1078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1079 ;; Tracked objects:
  1080 ;;		On entry : 0/0
  1081 ;;		On exit  : 0/0
  1082 ;;		Unchanged: 0/0
  1083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1084 ;;      Params:         0       0       0       0       0       0       0
  1085 ;;      Locals:         4       0       0       0       0       0       0
  1086 ;;      Temps:          3       0       0       0       0       0       0
  1087 ;;      Totals:         7       0       0       0       0       0       0
  1088 ;;Total ram usage:        7 bytes
  1089 ;; Hardware stack levels used:    1
  1090 ;; Hardware stack levels required when called:    2
  1091 ;; This function calls:
  1092 ;;		___wmul
  1093 ;;		_calculToucheCombien
  1094 ;; This function is called by:
  1095 ;;		_main
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099                           	psect	text5
  1100  00789C                     __ptext5:
  1101                           	opt callstack 0
  1102  00789C                     _metToucheCombien:
  1103                           	opt callstack 28
  1104  00789C                     
  1105                           ;main.c: 145: for(int i = 0; i<20; i++){
  1106  00789C  0E00               	movlw	0
  1107  00789E  6E1B               	movwf	(metToucheCombien@i+1)^0,c
  1108  0078A0  0E00               	movlw	0
  1109  0078A2  6E1A               	movwf	metToucheCombien@i^0,c
  1110  0078A4                     l1892:
  1111                           
  1112                           ;main.c: 146: for(int j = 0; j<4; j++){
  1113  0078A4  0E00               	movlw	0
  1114  0078A6  6E1D               	movwf	(metToucheCombien@j+1)^0,c
  1115  0078A8  0E00               	movlw	0
  1116  0078AA  6E1C               	movwf	metToucheCombien@j^0,c
  1117  0078AC                     l1898:
  1118                           
  1119                           ;main.c: 147: if(m_tabMines[j][i] != 3){
  1120  0078AC  C01C  F001         	movff	metToucheCombien@j,___wmul@multiplier
  1121  0078B0  C01D  F002         	movff	metToucheCombien@j+1,___wmul@multiplier+1
  1122  0078B4  0E00               	movlw	0
  1123  0078B6  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1124  0078B8  0E15               	movlw	21
  1125  0078BA  6E03               	movwf	___wmul@multiplicand^0,c
  1126  0078BC  EC05  F039         	call	___wmul	;wreg free
  1127  0078C0  0E60               	movlw	low _m_tabMines
  1128  0078C2  6E17               	movwf	??_metToucheCombien^0,c
  1129  0078C4  0E00               	movlw	high _m_tabMines
  1130  0078C6  6E18               	movwf	(??_metToucheCombien+1)^0,c
  1131  0078C8  5001               	movf	?___wmul^0,w,c
  1132  0078CA  2617               	addwf	??_metToucheCombien^0,f,c
  1133  0078CC  5002               	movf	(?___wmul+1)^0,w,c
  1134  0078CE  2218               	addwfc	(??_metToucheCombien+1)^0,f,c
  1135  0078D0  501A               	movf	metToucheCombien@i^0,w,c
  1136  0078D2  2417               	addwf	??_metToucheCombien^0,w,c
  1137  0078D4  6ED9               	movwf	fsr2l,c
  1138  0078D6  501B               	movf	(metToucheCombien@i+1)^0,w,c
  1139  0078D8  2018               	addwfc	(??_metToucheCombien+1)^0,w,c
  1140  0078DA  6EDA               	movwf	fsr2h,c
  1141  0078DC  0E03               	movlw	3
  1142  0078DE  18DE               	xorwf	postinc2,w,c
  1143  0078E0  B4D8               	btfsc	status,2,c
  1144  0078E2  EF75  F03C         	goto	u721
  1145  0078E6  EF77  F03C         	goto	u720
  1146  0078EA                     u721:
  1147  0078EA  EF9C  F03C         	goto	l1902
  1148  0078EE                     u720:
  1149  0078EE                     
  1150                           ;main.c: 148: m_tabMines[j][i] = calculToucheCombien(j, i);
  1151  0078EE  C01C  F007         	movff	metToucheCombien@j,calculToucheCombien@ligne
  1152  0078F2  C01D  F008         	movff	metToucheCombien@j+1,calculToucheCombien@ligne+1
  1153  0078F6  C01A  F009         	movff	metToucheCombien@i,calculToucheCombien@colonne
  1154  0078FA  C01B  F00A         	movff	metToucheCombien@i+1,calculToucheCombien@colonne+1
  1155  0078FE  EC57  F03D         	call	_calculToucheCombien	;wreg free
  1156  007902  6E17               	movwf	??_metToucheCombien^0,c
  1157  007904  C01C  F001         	movff	metToucheCombien@j,___wmul@multiplier
  1158  007908  C01D  F002         	movff	metToucheCombien@j+1,___wmul@multiplier+1
  1159  00790C  0E00               	movlw	0
  1160  00790E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1161  007910  0E15               	movlw	21
  1162  007912  6E03               	movwf	___wmul@multiplicand^0,c
  1163  007914  EC05  F039         	call	___wmul	;wreg free
  1164  007918  0E60               	movlw	low _m_tabMines
  1165  00791A  6E18               	movwf	(??_metToucheCombien+1)^0,c
  1166  00791C  0E00               	movlw	high _m_tabMines
  1167  00791E  6E19               	movwf	(??_metToucheCombien+2)^0,c
  1168  007920  5001               	movf	?___wmul^0,w,c
  1169  007922  2618               	addwf	(??_metToucheCombien+1)^0,f,c
  1170  007924  5002               	movf	(?___wmul+1)^0,w,c
  1171  007926  2219               	addwfc	(??_metToucheCombien+2)^0,f,c
  1172  007928  501A               	movf	metToucheCombien@i^0,w,c
  1173  00792A  2418               	addwf	(??_metToucheCombien+1)^0,w,c
  1174  00792C  6ED9               	movwf	fsr2l,c
  1175  00792E  501B               	movf	(metToucheCombien@i+1)^0,w,c
  1176  007930  2019               	addwfc	(??_metToucheCombien+2)^0,w,c
  1177  007932  6EDA               	movwf	fsr2h,c
  1178  007934  C017  FFDF         	movff	??_metToucheCombien,indf2
  1179  007938                     l1902:
  1180  007938  4A1C               	infsnz	metToucheCombien@j^0,f,c
  1181  00793A  2A1D               	incf	(metToucheCombien@j+1)^0,f,c
  1182  00793C  BE1D               	btfsc	(metToucheCombien@j+1)^0,7,c
  1183  00793E  EFAA  F03C         	goto	u731
  1184  007942  501D               	movf	(metToucheCombien@j+1)^0,w,c
  1185  007944  E109               	bnz	u730
  1186  007946  0E04               	movlw	4
  1187  007948  5C1C               	subwf	metToucheCombien@j^0,w,c
  1188  00794A  A0D8               	btfss	status,0,c
  1189  00794C  EFAA  F03C         	goto	u731
  1190  007950  EFAC  F03C         	goto	u730
  1191  007954                     u731:
  1192  007954  EF56  F03C         	goto	l1898
  1193  007958                     u730:
  1194  007958  4A1A               	infsnz	metToucheCombien@i^0,f,c
  1195  00795A  2A1B               	incf	(metToucheCombien@i+1)^0,f,c
  1196  00795C  BE1B               	btfsc	(metToucheCombien@i+1)^0,7,c
  1197  00795E  EFBA  F03C         	goto	u741
  1198  007962  501B               	movf	(metToucheCombien@i+1)^0,w,c
  1199  007964  E109               	bnz	u740
  1200  007966  0E14               	movlw	20
  1201  007968  5C1A               	subwf	metToucheCombien@i^0,w,c
  1202  00796A  A0D8               	btfss	status,0,c
  1203  00796C  EFBA  F03C         	goto	u741
  1204  007970  EFBC  F03C         	goto	u740
  1205  007974                     u741:
  1206  007974  EF52  F03C         	goto	l1892
  1207  007978                     u740:
  1208  007978  0012               	return		;funcret
  1209  00797A                     __end_of_metToucheCombien:
  1210                           	opt callstack 0
  1211                           
  1212 ;; *************** function _calculToucheCombien *****************
  1213 ;; Defined at:
  1214 ;;		line 159 in file "main.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;  ligne           2    6[COMRAM] int 
  1217 ;;  colonne         2    8[COMRAM] int 
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;  j               2   20[COMRAM] int 
  1220 ;;  i               2   18[COMRAM] int 
  1221 ;;  y               2   16[COMRAM] int 
  1222 ;;  x               2   14[COMRAM] int 
  1223 ;;  total           1   13[COMRAM] unsigned char 
  1224 ;; Return value:  Size  Location     Type
  1225 ;;                  1    wreg      unsigned char 
  1226 ;; Registers used:
  1227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1228 ;; Tracked objects:
  1229 ;;		On entry : 0/0
  1230 ;;		On exit  : 0/0
  1231 ;;		Unchanged: 0/0
  1232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1233 ;;      Params:         4       0       0       0       0       0       0
  1234 ;;      Locals:         9       0       0       0       0       0       0
  1235 ;;      Temps:          3       0       0       0       0       0       0
  1236 ;;      Totals:        16       0       0       0       0       0       0
  1237 ;;Total ram usage:       16 bytes
  1238 ;; Hardware stack levels used:    1
  1239 ;; Hardware stack levels required when called:    1
  1240 ;; This function calls:
  1241 ;;		___wmul
  1242 ;; This function is called by:
  1243 ;;		_metToucheCombien
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           	psect	text6
  1248  007AAE                     __ptext6:
  1249                           	opt callstack 0
  1250  007AAE                     _calculToucheCombien:
  1251                           	opt callstack 28
  1252  007AAE                     
  1253                           ;main.c: 161: int y = 0;
  1254  007AAE  0E00               	movlw	0
  1255  007AB0  6E12               	movwf	(calculToucheCombien@y+1)^0,c
  1256  007AB2  0E00               	movlw	0
  1257  007AB4  6E11               	movwf	calculToucheCombien@y^0,c
  1258                           
  1259                           ;main.c: 162: char total = 0;
  1260  007AB6  0E00               	movlw	0
  1261  007AB8  6E0E               	movwf	calculToucheCombien@total^0,c
  1262  007ABA                     
  1263                           ;main.c: 164: for(int i = -1; i < 2; i++){
  1264  007ABA  6813               	setf	calculToucheCombien@i^0,c
  1265  007ABC  6814               	setf	(calculToucheCombien@i+1)^0,c
  1266  007ABE                     l108:
  1267                           
  1268                           ;main.c: 165: for(int j = -1; j < 2; j++){
  1269  007ABE  6815               	setf	calculToucheCombien@j^0,c
  1270  007AC0  6816               	setf	(calculToucheCombien@j+1)^0,c
  1271  007AC2                     l1674:
  1272                           
  1273                           ;main.c: 166: if(j != 0 || i != 0){
  1274  007AC2  5015               	movf	calculToucheCombien@j^0,w,c
  1275  007AC4  1016               	iorwf	(calculToucheCombien@j+1)^0,w,c
  1276  007AC6  A4D8               	btfss	status,2,c
  1277  007AC8  EF68  F03D         	goto	u481
  1278  007ACC  EF6A  F03D         	goto	u480
  1279  007AD0                     u481:
  1280  007AD0  EF73  F03D         	goto	l1678
  1281  007AD4                     u480:
  1282  007AD4  5013               	movf	calculToucheCombien@i^0,w,c
  1283  007AD6  1014               	iorwf	(calculToucheCombien@i+1)^0,w,c
  1284  007AD8  B4D8               	btfsc	status,2,c
  1285  007ADA  EF71  F03D         	goto	u491
  1286  007ADE  EF73  F03D         	goto	u490
  1287  007AE2                     u491:
  1288  007AE2  EFCB  F03D         	goto	l112
  1289  007AE6                     u490:
  1290  007AE6                     l1678:
  1291                           
  1292                           ;main.c: 167: x = colonne + i;
  1293  007AE6  5013               	movf	calculToucheCombien@i^0,w,c
  1294  007AE8  2409               	addwf	calculToucheCombien@colonne^0,w,c
  1295  007AEA  6E0F               	movwf	calculToucheCombien@x^0,c
  1296  007AEC  5014               	movf	(calculToucheCombien@i+1)^0,w,c
  1297  007AEE  200A               	addwfc	(calculToucheCombien@colonne+1)^0,w,c
  1298  007AF0  6E10               	movwf	(calculToucheCombien@x+1)^0,c
  1299                           
  1300                           ;main.c: 168: y = ligne + j;
  1301  007AF2  5015               	movf	calculToucheCombien@j^0,w,c
  1302  007AF4  2407               	addwf	calculToucheCombien@ligne^0,w,c
  1303  007AF6  6E11               	movwf	calculToucheCombien@y^0,c
  1304  007AF8  5016               	movf	(calculToucheCombien@j+1)^0,w,c
  1305  007AFA  2008               	addwfc	(calculToucheCombien@ligne+1)^0,w,c
  1306  007AFC  6E12               	movwf	(calculToucheCombien@y+1)^0,c
  1307                           
  1308                           ;main.c: 169: if(x >= 0 && x < 20 && y >= 0 && y < 4){
  1309  007AFE  BE10               	btfsc	(calculToucheCombien@x+1)^0,7,c
  1310  007B00  EF84  F03D         	goto	u501
  1311  007B04  EF86  F03D         	goto	u500
  1312  007B08                     u501:
  1313  007B08  EFCB  F03D         	goto	l112
  1314  007B0C                     u500:
  1315  007B0C  BE10               	btfsc	(calculToucheCombien@x+1)^0,7,c
  1316  007B0E  EF94  F03D         	goto	u510
  1317  007B12  5010               	movf	(calculToucheCombien@x+1)^0,w,c
  1318  007B14  E107               	bnz	u511
  1319  007B16  0E14               	movlw	20
  1320  007B18  5C0F               	subwf	calculToucheCombien@x^0,w,c
  1321  007B1A  B0D8               	btfsc	status,0,c
  1322  007B1C  EF92  F03D         	goto	u511
  1323  007B20  EF94  F03D         	goto	u510
  1324  007B24                     u511:
  1325  007B24  EFCB  F03D         	goto	l112
  1326  007B28                     u510:
  1327  007B28  BE12               	btfsc	(calculToucheCombien@y+1)^0,7,c
  1328  007B2A  EF99  F03D         	goto	u521
  1329  007B2E  EF9B  F03D         	goto	u520
  1330  007B32                     u521:
  1331  007B32  EFCB  F03D         	goto	l112
  1332  007B36                     u520:
  1333  007B36  BE12               	btfsc	(calculToucheCombien@y+1)^0,7,c
  1334  007B38  EFA9  F03D         	goto	u530
  1335  007B3C  5012               	movf	(calculToucheCombien@y+1)^0,w,c
  1336  007B3E  E107               	bnz	u531
  1337  007B40  0E04               	movlw	4
  1338  007B42  5C11               	subwf	calculToucheCombien@y^0,w,c
  1339  007B44  B0D8               	btfsc	status,0,c
  1340  007B46  EFA7  F03D         	goto	u531
  1341  007B4A  EFA9  F03D         	goto	u530
  1342  007B4E                     u531:
  1343  007B4E  EFCB  F03D         	goto	l112
  1344  007B52                     u530:
  1345  007B52                     
  1346                           ;main.c: 170: if(m_tabMines[y][x] == 3){
  1347  007B52  C011  F001         	movff	calculToucheCombien@y,___wmul@multiplier
  1348  007B56  C012  F002         	movff	calculToucheCombien@y+1,___wmul@multiplier+1
  1349  007B5A  0E00               	movlw	0
  1350  007B5C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1351  007B5E  0E15               	movlw	21
  1352  007B60  6E03               	movwf	___wmul@multiplicand^0,c
  1353  007B62  EC05  F039         	call	___wmul	;wreg free
  1354  007B66  0E60               	movlw	low _m_tabMines
  1355  007B68  6E0B               	movwf	??_calculToucheCombien^0,c
  1356  007B6A  0E00               	movlw	high _m_tabMines
  1357  007B6C  6E0C               	movwf	(??_calculToucheCombien+1)^0,c
  1358  007B6E  5001               	movf	?___wmul^0,w,c
  1359  007B70  260B               	addwf	??_calculToucheCombien^0,f,c
  1360  007B72  5002               	movf	(?___wmul+1)^0,w,c
  1361  007B74  220C               	addwfc	(??_calculToucheCombien+1)^0,f,c
  1362  007B76  500F               	movf	calculToucheCombien@x^0,w,c
  1363  007B78  240B               	addwf	??_calculToucheCombien^0,w,c
  1364  007B7A  6ED9               	movwf	fsr2l,c
  1365  007B7C  5010               	movf	(calculToucheCombien@x+1)^0,w,c
  1366  007B7E  200C               	addwfc	(??_calculToucheCombien+1)^0,w,c
  1367  007B80  6EDA               	movwf	fsr2h,c
  1368  007B82  0E03               	movlw	3
  1369  007B84  18DE               	xorwf	postinc2,w,c
  1370  007B86  A4D8               	btfss	status,2,c
  1371  007B88  EFC8  F03D         	goto	u541
  1372  007B8C  EFCA  F03D         	goto	u540
  1373  007B90                     u541:
  1374  007B90  EFCB  F03D         	goto	l112
  1375  007B94                     u540:
  1376  007B94                     
  1377                           ;main.c: 171: total++;
  1378  007B94  2A0E               	incf	calculToucheCombien@total^0,f,c
  1379  007B96                     l112:
  1380  007B96  4A15               	infsnz	calculToucheCombien@j^0,f,c
  1381  007B98  2A16               	incf	(calculToucheCombien@j+1)^0,f,c
  1382  007B9A  BE16               	btfsc	(calculToucheCombien@j+1)^0,7,c
  1383  007B9C  EFD9  F03D         	goto	u551
  1384  007BA0  5016               	movf	(calculToucheCombien@j+1)^0,w,c
  1385  007BA2  E109               	bnz	u550
  1386  007BA4  0E02               	movlw	2
  1387  007BA6  5C15               	subwf	calculToucheCombien@j^0,w,c
  1388  007BA8  A0D8               	btfss	status,0,c
  1389  007BAA  EFD9  F03D         	goto	u551
  1390  007BAE  EFDB  F03D         	goto	u550
  1391  007BB2                     u551:
  1392  007BB2  EF61  F03D         	goto	l1674
  1393  007BB6                     u550:
  1394  007BB6  4A13               	infsnz	calculToucheCombien@i^0,f,c
  1395  007BB8  2A14               	incf	(calculToucheCombien@i+1)^0,f,c
  1396  007BBA  BE14               	btfsc	(calculToucheCombien@i+1)^0,7,c
  1397  007BBC  EFE9  F03D         	goto	u561
  1398  007BC0  5014               	movf	(calculToucheCombien@i+1)^0,w,c
  1399  007BC2  E109               	bnz	u560
  1400  007BC4  0E02               	movlw	2
  1401  007BC6  5C13               	subwf	calculToucheCombien@i^0,w,c
  1402  007BC8  A0D8               	btfss	status,0,c
  1403  007BCA  EFE9  F03D         	goto	u561
  1404  007BCE  EFEB  F03D         	goto	u560
  1405  007BD2                     u561:
  1406  007BD2  EF5F  F03D         	goto	l108
  1407  007BD6                     u560:
  1408  007BD6                     
  1409                           ;main.c: 172: };main.c: 173: };main.c: 174: };main.c: 175: };main.c: 176: };main.c: 177:
      +                           if(total == 0){
  1410  007BD6  500E               	movf	calculToucheCombien@total^0,w,c
  1411  007BD8  A4D8               	btfss	status,2,c
  1412  007BDA  EFF1  F03D         	goto	u571
  1413  007BDE  EFF3  F03D         	goto	u570
  1414  007BE2                     u571:
  1415  007BE2  EFF6  F03D         	goto	l1702
  1416  007BE6                     u570:
  1417  007BE6                     
  1418                           ;main.c: 178: return 32;
  1419  007BE6  0E20               	movlw	32
  1420  007BE8  EFF8  F03D         	goto	l118
  1421  007BEC                     l1702:
  1422                           
  1423                           ;main.c: 179: };main.c: 180: return total+48;
  1424  007BEC  500E               	movf	calculToucheCombien@total^0,w,c
  1425  007BEE  0F30               	addlw	48
  1426  007BF0                     l118:
  1427  007BF0  0012               	return		;funcret
  1428  007BF2                     __end_of_calculToucheCombien:
  1429                           	opt callstack 0
  1430                           
  1431 ;; *************** function _lcd_init *****************
  1432 ;; Defined at:
  1433 ;;		line 282 in file "Lcd4Lignes.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;		None
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;		None
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1447 ;;      Params:         0       0       0       0       0       0       0
  1448 ;;      Locals:         0       0       0       0       0       0       0
  1449 ;;      Temps:          0       0       0       0       0       0       0
  1450 ;;      Totals:         0       0       0       0       0       0       0
  1451 ;;Total ram usage:        0 bytes
  1452 ;; Hardware stack levels used:    1
  1453 ;; Hardware stack levels required when called:    5
  1454 ;; This function calls:
  1455 ;;		_lcd_initCGRam
  1456 ;;		_lcd_resetSequence
  1457 ;;		_lcd_wrCom
  1458 ;; This function is called by:
  1459 ;;		_main
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text7
  1464  007258                     __ptext7:
  1465                           	opt callstack 0
  1466  007258                     _lcd_init:
  1467                           	opt callstack 25
  1468  007258                     
  1469                           ;Lcd4Lignes.c: 285: lcd_resetSequence();
  1470  007258  EC07  F03B         	call	_lcd_resetSequence	;wreg free
  1471                           
  1472                           ;Lcd4Lignes.c: 286: lcd_wrCom(0x28);
  1473  00725C  0E28               	movlw	40
  1474  00725E  ECA5  F03A         	call	_lcd_wrCom
  1475                           
  1476                           ;Lcd4Lignes.c: 287: lcd_wrCom(0x0F);
  1477  007262  0E0F               	movlw	15
  1478  007264  ECA5  F03A         	call	_lcd_wrCom
  1479                           
  1480                           ;Lcd4Lignes.c: 288: lcd_wrCom(0x01);
  1481  007268  0E01               	movlw	1
  1482  00726A  ECA5  F03A         	call	_lcd_wrCom
  1483                           
  1484                           ;Lcd4Lignes.c: 289: lcd_wrCom(0x06);
  1485  00726E  0E06               	movlw	6
  1486  007270  ECA5  F03A         	call	_lcd_wrCom
  1487                           
  1488                           ;Lcd4Lignes.c: 290: lcd_wrCom(0x80);
  1489  007274  0E80               	movlw	128
  1490  007276  ECA5  F03A         	call	_lcd_wrCom
  1491  00727A                     
  1492                           ;Lcd4Lignes.c: 291: lcd_initCGRam();
  1493  00727A  EC47  F03A         	call	_lcd_initCGRam	;wreg free
  1494  00727E  0012               	return		;funcret
  1495  007280                     __end_of_lcd_init:
  1496                           	opt callstack 0
  1497                           
  1498 ;; *************** function _lcd_resetSequence *****************
  1499 ;; Defined at:
  1500 ;;		line 245 in file "Lcd4Lignes.c"
  1501 ;; Parameters:    Size  Location     Type
  1502 ;;		None
  1503 ;; Auto vars:     Size  Location     Type
  1504 ;;		None
  1505 ;; Return value:  Size  Location     Type
  1506 ;;                  1    wreg      void 
  1507 ;; Registers used:
  1508 ;;		wreg, status,2, status,0, cstack
  1509 ;; Tracked objects:
  1510 ;;		On entry : 0/0
  1511 ;;		On exit  : 0/0
  1512 ;;		Unchanged: 0/0
  1513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1514 ;;      Params:         0       0       0       0       0       0       0
  1515 ;;      Locals:         0       0       0       0       0       0       0
  1516 ;;      Temps:          1       0       0       0       0       0       0
  1517 ;;      Totals:         1       0       0       0       0       0       0
  1518 ;;Total ram usage:        1 bytes
  1519 ;; Hardware stack levels used:    1
  1520 ;; Hardware stack levels required when called:    1
  1521 ;; This function calls:
  1522 ;;		_lcd_ecrireDonnees
  1523 ;;		_lcd_strobeEnableBit
  1524 ;; This function is called by:
  1525 ;;		_lcd_init
  1526 ;; This function uses a non-reentrant model
  1527 ;;
  1528                           
  1529                           	psect	text8
  1530  00760E                     __ptext8:
  1531                           	opt callstack 0
  1532  00760E                     _lcd_resetSequence:
  1533                           	opt callstack 28
  1534  00760E                     
  1535                           ;Lcd4Lignes.c: 250: TRISD = 0b00000000;
  1536  00760E  0E00               	movlw	0
  1537  007610  6E95               	movwf	149,c	;volatile
  1538  007612                     
  1539                           ;Lcd4Lignes.c: 252: _delay((unsigned long)((40)*(1000000/4000.0)));
  1540  007612  0E0D               	movlw	13
  1541  007614  6E03               	movwf	??_lcd_resetSequence^0,c
  1542  007616  0EFC               	movlw	252
  1543  007618                     u837:
  1544  007618  2EE8               	decfsz	wreg,f,c
  1545  00761A  D7FE               	bra	u837
  1546  00761C  2E03               	decfsz	??_lcd_resetSequence^0,f,c
  1547  00761E  D7FC               	bra	u837
  1548  007620                     
  1549                           ;Lcd4Lignes.c: 253: PORTAbits.RA0 = 0;
  1550  007620  9080               	bcf	128,0,c	;volatile
  1551  007622                     
  1552                           ;Lcd4Lignes.c: 254: PORTAbits.RA1 = 0;
  1553  007622  9280               	bcf	128,1,c	;volatile
  1554  007624                     
  1555                           ;Lcd4Lignes.c: 256: lcd_ecrireDonnees(0x03);
  1556  007624  0E03               	movlw	3
  1557  007626  ECFB  F038         	call	_lcd_ecrireDonnees
  1558  00762A                     
  1559                           ;Lcd4Lignes.c: 257: lcd_strobeEnableBit();
  1560  00762A  ECE5  F038         	call	_lcd_strobeEnableBit	;wreg free
  1561  00762E                     
  1562                           ;Lcd4Lignes.c: 258: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1563  00762E  0E03               	movlw	3
  1564  007630                     u847:
  1565  007630  2EE8               	decfsz	wreg,f,c
  1566  007632  D7FE               	bra	u847
  1567  007634  F000               	nop	
  1568  007636                     
  1569                           ;Lcd4Lignes.c: 261: lcd_ecrireDonnees(0x03);
  1570  007636  0E03               	movlw	3
  1571  007638  ECFB  F038         	call	_lcd_ecrireDonnees
  1572  00763C                     
  1573                           ;Lcd4Lignes.c: 262: lcd_strobeEnableBit();
  1574  00763C  ECE5  F038         	call	_lcd_strobeEnableBit	;wreg free
  1575  007640                     
  1576                           ;Lcd4Lignes.c: 263: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1577  007640  0E03               	movlw	3
  1578  007642                     u857:
  1579  007642  2EE8               	decfsz	wreg,f,c
  1580  007644  D7FE               	bra	u857
  1581  007646  F000               	nop	
  1582  007648                     
  1583                           ;Lcd4Lignes.c: 265: lcd_ecrireDonnees(0x03);
  1584  007648  0E03               	movlw	3
  1585  00764A  ECFB  F038         	call	_lcd_ecrireDonnees
  1586  00764E                     
  1587                           ;Lcd4Lignes.c: 266: lcd_strobeEnableBit();
  1588  00764E  ECE5  F038         	call	_lcd_strobeEnableBit	;wreg free
  1589  007652                     
  1590                           ;Lcd4Lignes.c: 267: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1591  007652  0E03               	movlw	3
  1592  007654                     u867:
  1593  007654  2EE8               	decfsz	wreg,f,c
  1594  007656  D7FE               	bra	u867
  1595  007658  F000               	nop	
  1596  00765A                     
  1597                           ;Lcd4Lignes.c: 269: lcd_ecrireDonnees(0x02);
  1598  00765A  0E02               	movlw	2
  1599  00765C  ECFB  F038         	call	_lcd_ecrireDonnees
  1600  007660                     
  1601                           ;Lcd4Lignes.c: 270: lcd_strobeEnableBit();
  1602  007660  ECE5  F038         	call	_lcd_strobeEnableBit	;wreg free
  1603  007664                     
  1604                           ;Lcd4Lignes.c: 271: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1605  007664  0E03               	movlw	3
  1606  007666                     u877:
  1607  007666  2EE8               	decfsz	wreg,f,c
  1608  007668  D7FE               	bra	u877
  1609  00766A  F000               	nop	
  1610  00766C                     
  1611                           ;Lcd4Lignes.c: 273: TRISD = 0b00001111;
  1612  00766C  0E0F               	movlw	15
  1613  00766E  6E95               	movwf	149,c	;volatile
  1614  007670  0012               	return		;funcret
  1615  007672                     __end_of_lcd_resetSequence:
  1616                           	opt callstack 0
  1617                           
  1618 ;; *************** function _lcd_initCGRam *****************
  1619 ;; Defined at:
  1620 ;;		line 441 in file "Lcd4Lignes.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;		None
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;  j               1    6[COMRAM] unsigned char 
  1625 ;;  i               1    5[COMRAM] unsigned char 
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  1    wreg      void 
  1628 ;; Registers used:
  1629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1635 ;;      Params:         0       0       0       0       0       0       0
  1636 ;;      Locals:         2       0       0       0       0       0       0
  1637 ;;      Temps:          2       0       0       0       0       0       0
  1638 ;;      Totals:         4       0       0       0       0       0       0
  1639 ;;Total ram usage:        4 bytes
  1640 ;; Hardware stack levels used:    1
  1641 ;; Hardware stack levels required when called:    4
  1642 ;; This function calls:
  1643 ;;		_lcd_curseurHome
  1644 ;;		_lcd_wrCom
  1645 ;;		_lcd_wrData
  1646 ;; This function is called by:
  1647 ;;		_lcd_init
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651                           	psect	text9
  1652  00748E                     __ptext9:
  1653                           	opt callstack 0
  1654  00748E                     _lcd_initCGRam:
  1655                           	opt callstack 25
  1656  00748E                     
  1657                           ;Lcd4Lignes.c: 443: char i,j;;Lcd4Lignes.c: 445: lcd_wrCom(0x40);
  1658  00748E  0E40               	movlw	64
  1659  007490  ECA5  F03A         	call	_lcd_wrCom
  1660  007494                     
  1661                           ;Lcd4Lignes.c: 446: for(i=0;i<8;i++)
  1662  007494  0E00               	movlw	0
  1663  007496  6E06               	movwf	lcd_initCGRam@i^0,c
  1664  007498                     l1750:
  1665                           
  1666                           ;Lcd4Lignes.c: 447: {;Lcd4Lignes.c: 448: for(j=0;j<8;j++)
  1667  007498  0E00               	movlw	0
  1668  00749A  6E07               	movwf	lcd_initCGRam@j^0,c
  1669  00749C                     l1756:
  1670                           
  1671                           ;Lcd4Lignes.c: 449: lcd_wrData(matCGRAM[i][j]);
  1672  00749C  5006               	movf	lcd_initCGRam@i^0,w,c
  1673  00749E  0D08               	mullw	8
  1674  0074A0  0EB4               	movlw	low _matCGRAM
  1675  0074A2  6E04               	movwf	??_lcd_initCGRam^0,c
  1676  0074A4  0E00               	movlw	high _matCGRAM
  1677  0074A6  6E05               	movwf	(??_lcd_initCGRam+1)^0,c
  1678  0074A8  50F3               	movf	243,w,c
  1679  0074AA  2604               	addwf	??_lcd_initCGRam^0,f,c
  1680  0074AC  50F4               	movf	244,w,c
  1681  0074AE  2205               	addwfc	(??_lcd_initCGRam+1)^0,f,c
  1682  0074B0  5007               	movf	lcd_initCGRam@j^0,w,c
  1683  0074B2  2404               	addwf	??_lcd_initCGRam^0,w,c
  1684  0074B4  6ED9               	movwf	fsr2l,c
  1685  0074B6  0E00               	movlw	0
  1686  0074B8  2005               	addwfc	(??_lcd_initCGRam+1)^0,w,c
  1687  0074BA  6EDA               	movwf	fsr2h,c
  1688  0074BC  50DF               	movf	indf2,w,c
  1689  0074BE  EC40  F039         	call	_lcd_wrData
  1690  0074C2  2A07               	incf	lcd_initCGRam@j^0,f,c
  1691  0074C4  0E07               	movlw	7
  1692  0074C6  6407               	cpfsgt	lcd_initCGRam@j^0,c
  1693  0074C8  EF68  F03A         	goto	u581
  1694  0074CC  EF6A  F03A         	goto	u580
  1695  0074D0                     u581:
  1696  0074D0  EF4E  F03A         	goto	l1756
  1697  0074D4                     u580:
  1698  0074D4  2A06               	incf	lcd_initCGRam@i^0,f,c
  1699  0074D6  0E07               	movlw	7
  1700  0074D8  6406               	cpfsgt	lcd_initCGRam@i^0,c
  1701  0074DA  EF71  F03A         	goto	u591
  1702  0074DE  EF73  F03A         	goto	u590
  1703  0074E2                     u591:
  1704  0074E2  EF4C  F03A         	goto	l1750
  1705  0074E6                     u590:
  1706  0074E6                     
  1707                           ;Lcd4Lignes.c: 450: };Lcd4Lignes.c: 451: lcd_curseurHome();
  1708  0074E6  ECE9  F038         	call	_lcd_curseurHome	;wreg free
  1709  0074EA  0012               	return		;funcret
  1710  0074EC                     __end_of_lcd_initCGRam:
  1711                           	opt callstack 0
  1712                           
  1713 ;; *************** function _lcd_curseurHome *****************
  1714 ;; Defined at:
  1715 ;;		line 312 in file "Lcd4Lignes.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;		None
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;		None
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  1    wreg      void 
  1722 ;; Registers used:
  1723 ;;		wreg, status,2, status,0, cstack
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1729 ;;      Params:         0       0       0       0       0       0       0
  1730 ;;      Locals:         0       0       0       0       0       0       0
  1731 ;;      Temps:          0       0       0       0       0       0       0
  1732 ;;      Totals:         0       0       0       0       0       0       0
  1733 ;;Total ram usage:        0 bytes
  1734 ;; Hardware stack levels used:    1
  1735 ;; Hardware stack levels required when called:    3
  1736 ;; This function calls:
  1737 ;;		_lcd_wrCom
  1738 ;; This function is called by:
  1739 ;;		_main
  1740 ;;		_lcd_initCGRam
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           	psect	text10
  1745  0071D2                     __ptext10:
  1746                           	opt callstack 0
  1747  0071D2                     _lcd_curseurHome:
  1748                           	opt callstack 25
  1749  0071D2                     
  1750                           ;Lcd4Lignes.c: 314: lcd_wrCom(0x02);
  1751  0071D2  0E02               	movlw	2
  1752  0071D4  ECA5  F03A         	call	_lcd_wrCom
  1753  0071D8  0012               	return		;funcret
  1754  0071DA                     __end_of_lcd_curseurHome:
  1755                           	opt callstack 0
  1756                           
  1757 ;; *************** function _initialisation *****************
  1758 ;; Defined at:
  1759 ;;		line 262 in file "main.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;		None
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;		None
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      void 
  1766 ;; Registers used:
  1767 ;;		wreg, status,2, cstack
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1773 ;;      Params:         0       0       0       0       0       0       0
  1774 ;;      Locals:         0       0       0       0       0       0       0
  1775 ;;      Temps:          0       0       0       0       0       0       0
  1776 ;;      Totals:         0       0       0       0       0       0       0
  1777 ;;Total ram usage:        0 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    1
  1780 ;; This function calls:
  1781 ;;		_srand
  1782 ;; This function is called by:
  1783 ;;		_main
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787                           	psect	text11
  1788  0072AE                     __ptext11:
  1789                           	opt callstack 0
  1790  0072AE                     _initialisation:
  1791                           	opt callstack 29
  1792  0072AE                     
  1793                           ;main.c: 265: TRISD = 0;
  1794  0072AE  0E00               	movlw	0
  1795  0072B0  6E95               	movwf	149,c	;volatile
  1796                           
  1797                           ;main.c: 267: ANSELH = 0;
  1798  0072B2  0E00               	movlw	0
  1799  0072B4  6E7F               	movwf	127,c	;volatile
  1800  0072B6                     
  1801                           ;main.c: 268: TRISB = 0xFF;
  1802  0072B6  6893               	setf	147,c	;volatile
  1803                           
  1804                           ;main.c: 270: ANSEL = 0;
  1805  0072B8  0E00               	movlw	0
  1806  0072BA  6E7E               	movwf	126,c	;volatile
  1807                           
  1808                           ;main.c: 271: TRISA = 0;
  1809  0072BC  0E00               	movlw	0
  1810  0072BE  6E92               	movwf	146,c	;volatile
  1811  0072C0                     
  1812                           ;main.c: 275: T1CONbits.TMR1ON = 1;
  1813  0072C0  80CD               	bsf	205,0,c	;volatile
  1814  0072C2                     
  1815                           ;main.c: 276: srand(TMR1);
  1816  0072C2  CFCE F001          	movff	4046,srand@x	;volatile
  1817  0072C6  CFCF F002          	movff	4047,srand@x+1	;volatile
  1818  0072CA  ECF4  F038         	call	_srand	;wreg free
  1819  0072CE                     
  1820                           ;main.c: 279: ANSELbits.ANS7 = 1;
  1821  0072CE  8E7E               	bsf	126,7,c	;volatile
  1822  0072D0                     
  1823                           ;main.c: 281: ADCON0bits.ADON = 1;
  1824  0072D0  80C2               	bsf	194,0,c	;volatile
  1825  0072D2                     
  1826                           ;main.c: 282: ADCON1 = 0;
  1827  0072D2  0E00               	movlw	0
  1828  0072D4  6EC1               	movwf	193,c	;volatile
  1829  0072D6                     
  1830                           ;main.c: 284: ADCON2bits.ADFM = 0;
  1831  0072D6  9EC0               	bcf	192,7,c	;volatile
  1832  0072D8                     
  1833                           ;main.c: 285: ADCON2bits.ACQT = 0;
  1834  0072D8  0EC7               	movlw	-57
  1835  0072DA  16C0               	andwf	192,f,c	;volatile
  1836  0072DC                     
  1837                           ;main.c: 286: ADCON2bits.ADCS = 0;
  1838  0072DC  0EF8               	movlw	-8
  1839  0072DE  16C0               	andwf	192,f,c	;volatile
  1840  0072E0  0012               	return		;funcret
  1841  0072E2                     __end_of_initialisation:
  1842                           	opt callstack 0
  1843                           
  1844 ;; *************** function _srand *****************
  1845 ;; Defined at:
  1846 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;  x               2    0[COMRAM] unsigned int 
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;		None
  1851 ;; Return value:  Size  Location     Type
  1852 ;;                  1    wreg      void 
  1853 ;; Registers used:
  1854 ;;		status,2
  1855 ;; Tracked objects:
  1856 ;;		On entry : 0/0
  1857 ;;		On exit  : 0/0
  1858 ;;		Unchanged: 0/0
  1859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1860 ;;      Params:         2       0       0       0       0       0       0
  1861 ;;      Locals:         0       0       0       0       0       0       0
  1862 ;;      Temps:          0       0       0       0       0       0       0
  1863 ;;      Totals:         2       0       0       0       0       0       0
  1864 ;;Total ram usage:        2 bytes
  1865 ;; Hardware stack levels used:    1
  1866 ;; This function calls:
  1867 ;;		Nothing
  1868 ;; This function is called by:
  1869 ;;		_initialisation
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           	psect	text12
  1874  0071E8                     __ptext12:
  1875                           	opt callstack 0
  1876  0071E8                     _srand:
  1877                           	opt callstack 29
  1878  0071E8  C001  F025         	movff	srand@x,_randx
  1879  0071EC  C002  F026         	movff	srand@x+1,_randx+1
  1880  0071F0  6A27               	clrf	(_randx+2)^0,c
  1881  0071F2  6A28               	clrf	(_randx+3)^0,c
  1882  0071F4  0012               	return		;funcret
  1883  0071F6                     __end_of_srand:
  1884                           	opt callstack 0
  1885                           
  1886 ;; *************** function _initTabVue *****************
  1887 ;; Defined at:
  1888 ;;		line 100 in file "main.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;		None
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;  j               2    8[COMRAM] int 
  1893 ;;  i               2   10[COMRAM] int 
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  1    wreg      void 
  1896 ;; Registers used:
  1897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/0
  1900 ;;		On exit  : 0/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1903 ;;      Params:         0       0       0       0       0       0       0
  1904 ;;      Locals:         4       0       0       0       0       0       0
  1905 ;;      Temps:          2       0       0       0       0       0       0
  1906 ;;      Totals:         6       0       0       0       0       0       0
  1907 ;;Total ram usage:        6 bytes
  1908 ;; Hardware stack levels used:    1
  1909 ;; Hardware stack levels required when called:    1
  1910 ;; This function calls:
  1911 ;;		___wmul
  1912 ;; This function is called by:
  1913 ;;		_main
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           	psect	text13
  1918  007742                     __ptext13:
  1919                           	opt callstack 0
  1920  007742                     _initTabVue:
  1921                           	opt callstack 29
  1922  007742                     
  1923                           ;main.c: 101: for(int i = 0; i<4; i++){
  1924  007742  0E00               	movlw	0
  1925  007744  6E0C               	movwf	(initTabVue@i+1)^0,c
  1926  007746  0E00               	movlw	0
  1927  007748  6E0B               	movwf	initTabVue@i^0,c
  1928  00774A                     l1834:
  1929                           
  1930                           ;main.c: 102: for(int j = 0; j<20; j++){
  1931  00774A  0E00               	movlw	0
  1932  00774C  6E0A               	movwf	(initTabVue@j+1)^0,c
  1933  00774E  0E00               	movlw	0
  1934  007750  6E09               	movwf	initTabVue@j^0,c
  1935  007752                     l1840:
  1936                           
  1937                           ;main.c: 103: m_tabVue[i][j] = 2;
  1938  007752  C00B  F001         	movff	initTabVue@i,___wmul@multiplier
  1939  007756  C00C  F002         	movff	initTabVue@i+1,___wmul@multiplier+1
  1940  00775A  0E00               	movlw	0
  1941  00775C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1942  00775E  0E15               	movlw	21
  1943  007760  6E03               	movwf	___wmul@multiplicand^0,c
  1944  007762  EC05  F039         	call	___wmul	;wreg free
  1945  007766  0E00               	movlw	low _m_tabVue
  1946  007768  6E07               	movwf	??_initTabVue^0,c
  1947  00776A  0E01               	movlw	high _m_tabVue
  1948  00776C  6E08               	movwf	(??_initTabVue+1)^0,c
  1949  00776E  5001               	movf	?___wmul^0,w,c
  1950  007770  2607               	addwf	??_initTabVue^0,f,c
  1951  007772  5002               	movf	(?___wmul+1)^0,w,c
  1952  007774  2208               	addwfc	(??_initTabVue+1)^0,f,c
  1953  007776  5009               	movf	initTabVue@j^0,w,c
  1954  007778  2407               	addwf	??_initTabVue^0,w,c
  1955  00777A  6ED9               	movwf	fsr2l,c
  1956  00777C  500A               	movf	(initTabVue@j+1)^0,w,c
  1957  00777E  2008               	addwfc	(??_initTabVue+1)^0,w,c
  1958  007780  6EDA               	movwf	fsr2h,c
  1959  007782  0E02               	movlw	2
  1960  007784  6EDF               	movwf	indf2,c
  1961  007786  4A09               	infsnz	initTabVue@j^0,f,c
  1962  007788  2A0A               	incf	(initTabVue@j+1)^0,f,c
  1963  00778A  BE0A               	btfsc	(initTabVue@j+1)^0,7,c
  1964  00778C  EFD1  F03B         	goto	u661
  1965  007790  500A               	movf	(initTabVue@j+1)^0,w,c
  1966  007792  E109               	bnz	u660
  1967  007794  0E14               	movlw	20
  1968  007796  5C09               	subwf	initTabVue@j^0,w,c
  1969  007798  A0D8               	btfss	status,0,c
  1970  00779A  EFD1  F03B         	goto	u661
  1971  00779E  EFD3  F03B         	goto	u660
  1972  0077A2                     u661:
  1973  0077A2  EFA9  F03B         	goto	l1840
  1974  0077A6                     u660:
  1975  0077A6                     
  1976                           ;main.c: 104: };main.c: 105: m_tabVue[i][20] = '\0';
  1977  0077A6  C00B  F001         	movff	initTabVue@i,___wmul@multiplier
  1978  0077AA  C00C  F002         	movff	initTabVue@i+1,___wmul@multiplier+1
  1979  0077AE  0E00               	movlw	0
  1980  0077B0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1981  0077B2  0E15               	movlw	21
  1982  0077B4  6E03               	movwf	___wmul@multiplicand^0,c
  1983  0077B6  EC05  F039         	call	___wmul	;wreg free
  1984  0077BA  0E14               	movlw	low (_m_tabVue+20)
  1985  0077BC  2401               	addwf	?___wmul^0,w,c
  1986  0077BE  6ED9               	movwf	fsr2l,c
  1987  0077C0  0E01               	movlw	high (_m_tabVue+20)
  1988  0077C2  2002               	addwfc	(?___wmul+1)^0,w,c
  1989  0077C4  6EDA               	movwf	fsr2h,c
  1990  0077C6  0E00               	movlw	0
  1991  0077C8  6EDF               	movwf	indf2,c
  1992  0077CA  4A0B               	infsnz	initTabVue@i^0,f,c
  1993  0077CC  2A0C               	incf	(initTabVue@i+1)^0,f,c
  1994  0077CE  BE0C               	btfsc	(initTabVue@i+1)^0,7,c
  1995  0077D0  EFF3  F03B         	goto	u671
  1996  0077D4  500C               	movf	(initTabVue@i+1)^0,w,c
  1997  0077D6  E109               	bnz	u670
  1998  0077D8  0E04               	movlw	4
  1999  0077DA  5C0B               	subwf	initTabVue@i^0,w,c
  2000  0077DC  A0D8               	btfss	status,0,c
  2001  0077DE  EFF3  F03B         	goto	u671
  2002  0077E2  EFF5  F03B         	goto	u670
  2003  0077E6                     u671:
  2004  0077E6  EFA5  F03B         	goto	l1834
  2005  0077EA                     u670:
  2006  0077EA  0012               	return		;funcret
  2007  0077EC                     __end_of_initTabVue:
  2008                           	opt callstack 0
  2009                           
  2010 ;; *************** function _deplace *****************
  2011 ;; Defined at:
  2012 ;;		line 189 in file "main.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;  px              2    5[COMRAM] PTR unsigned char 
  2015 ;;		 -> main@x(1), 
  2016 ;;  py              2    7[COMRAM] PTR unsigned char 
  2017 ;;		 -> main@y(1), 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  aY              2   13[COMRAM] int 
  2020 ;;  aX              2   11[COMRAM] int 
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  1    wreg      void 
  2023 ;; Registers used:
  2024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2030 ;;      Params:         4       0       0       0       0       0       0
  2031 ;;      Locals:         4       0       0       0       0       0       0
  2032 ;;      Temps:          2       0       0       0       0       0       0
  2033 ;;      Totals:        10       0       0       0       0       0       0
  2034 ;;Total ram usage:       10 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    4
  2037 ;; This function calls:
  2038 ;;		_getAnalog
  2039 ;;		_lcd_gotoXY
  2040 ;; This function is called by:
  2041 ;;		_main
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text14
  2046  007BF2                     __ptext14:
  2047                           	opt callstack 0
  2048  007BF2                     _deplace:
  2049                           	opt callstack 26
  2050  007BF2                     
  2051                           ;main.c: 190: int aX = getAnalog(7);
  2052  007BF2  0E07               	movlw	7
  2053  007BF4  EC18  F039         	call	_getAnalog
  2054  007BF8  6E0A               	movwf	??_deplace^0,c
  2055  007BFA  500A               	movf	??_deplace^0,w,c
  2056  007BFC  6E0C               	movwf	deplace@aX^0,c
  2057  007BFE  6A0D               	clrf	(deplace@aX+1)^0,c
  2058                           
  2059                           ;main.c: 191: int aY = getAnalog(6);
  2060  007C00  0E06               	movlw	6
  2061  007C02  EC18  F039         	call	_getAnalog
  2062  007C06  6E0A               	movwf	??_deplace^0,c
  2063  007C08  500A               	movf	??_deplace^0,w,c
  2064  007C0A  6E0E               	movwf	deplace@aY^0,c
  2065  007C0C  6A0F               	clrf	(deplace@aY+1)^0,c
  2066  007C0E                     
  2067                           ;main.c: 193: if(aX < 100){
  2068  007C0E  BE0D               	btfsc	(deplace@aX+1)^0,7,c
  2069  007C10  EF15  F03E         	goto	u760
  2070  007C14  500D               	movf	(deplace@aX+1)^0,w,c
  2071  007C16  E107               	bnz	u761
  2072  007C18  0E64               	movlw	100
  2073  007C1A  5C0C               	subwf	deplace@aX^0,w,c
  2074  007C1C  B0D8               	btfsc	status,0,c
  2075  007C1E  EF13  F03E         	goto	u761
  2076  007C22  EF15  F03E         	goto	u760
  2077  007C26                     u761:
  2078  007C26  EF2D  F03E         	goto	l1934
  2079  007C2A                     u760:
  2080  007C2A                     
  2081                           ;main.c: 194: (*px)--;
  2082  007C2A  C006  FFD9         	movff	deplace@px,fsr2l
  2083  007C2E  C007  FFDA         	movff	deplace@px+1,fsr2h
  2084  007C32  06DF               	decf	indf2,f,c
  2085  007C34                     
  2086                           ;main.c: 195: lcd_gotoXY((*px)+1, (*py)+1);
  2087  007C34  C008  FFD9         	movff	deplace@py,fsr2l
  2088  007C38  C009  FFDA         	movff	deplace@py+1,fsr2h
  2089  007C3C  50DF               	movf	indf2,w,c
  2090  007C3E  6E0A               	movwf	??_deplace^0,c
  2091  007C40  280A               	incf	??_deplace^0,w,c
  2092  007C42  6E04               	movwf	lcd_gotoXY@y^0,c
  2093  007C44  C006  FFD9         	movff	deplace@px,fsr2l
  2094  007C48  C007  FFDA         	movff	deplace@px+1,fsr2h
  2095  007C4C  50DF               	movf	indf2,w,c
  2096  007C4E  6E0B               	movwf	(??_deplace+1)^0,c
  2097  007C50  280B               	incf	(??_deplace+1)^0,w,c
  2098  007C52  EC39  F03B         	call	_lcd_gotoXY
  2099                           
  2100                           ;main.c: 196: }else if(aX > 150){
  2101  007C56  EF9F  F03E         	goto	l128
  2102  007C5A                     l1934:
  2103  007C5A  BE0D               	btfsc	(deplace@aX+1)^0,7,c
  2104  007C5C  EF39  F03E         	goto	u771
  2105  007C60  500D               	movf	(deplace@aX+1)^0,w,c
  2106  007C62  E109               	bnz	u770
  2107  007C64  0E97               	movlw	151
  2108  007C66  5C0C               	subwf	deplace@aX^0,w,c
  2109  007C68  A0D8               	btfss	status,0,c
  2110  007C6A  EF39  F03E         	goto	u771
  2111  007C6E  EF3B  F03E         	goto	u770
  2112  007C72                     u771:
  2113  007C72  EF53  F03E         	goto	l1940
  2114  007C76                     u770:
  2115  007C76                     
  2116                           ;main.c: 197: (*px)++;
  2117  007C76  C006  FFD9         	movff	deplace@px,fsr2l
  2118  007C7A  C007  FFDA         	movff	deplace@px+1,fsr2h
  2119  007C7E  2ADF               	incf	indf2,f,c
  2120  007C80                     
  2121                           ;main.c: 198: lcd_gotoXY((*px)+1, (*py)+1);
  2122  007C80  C008  FFD9         	movff	deplace@py,fsr2l
  2123  007C84  C009  FFDA         	movff	deplace@py+1,fsr2h
  2124  007C88  50DF               	movf	indf2,w,c
  2125  007C8A  6E0A               	movwf	??_deplace^0,c
  2126  007C8C  280A               	incf	??_deplace^0,w,c
  2127  007C8E  6E04               	movwf	lcd_gotoXY@y^0,c
  2128  007C90  C006  FFD9         	movff	deplace@px,fsr2l
  2129  007C94  C007  FFDA         	movff	deplace@px+1,fsr2h
  2130  007C98  50DF               	movf	indf2,w,c
  2131  007C9A  6E0B               	movwf	(??_deplace+1)^0,c
  2132  007C9C  280B               	incf	(??_deplace+1)^0,w,c
  2133  007C9E  EC39  F03B         	call	_lcd_gotoXY
  2134                           
  2135                           ;main.c: 199: }else if(aY < 100){
  2136  007CA2  EF9F  F03E         	goto	l128
  2137  007CA6                     l1940:
  2138  007CA6  BE0F               	btfsc	(deplace@aY+1)^0,7,c
  2139  007CA8  EF61  F03E         	goto	u780
  2140  007CAC  500F               	movf	(deplace@aY+1)^0,w,c
  2141  007CAE  E107               	bnz	u781
  2142  007CB0  0E64               	movlw	100
  2143  007CB2  5C0E               	subwf	deplace@aY^0,w,c
  2144  007CB4  B0D8               	btfsc	status,0,c
  2145  007CB6  EF5F  F03E         	goto	u781
  2146  007CBA  EF61  F03E         	goto	u780
  2147  007CBE                     u781:
  2148  007CBE  EF79  F03E         	goto	l1946
  2149  007CC2                     u780:
  2150  007CC2                     
  2151                           ;main.c: 200: (*py)--;
  2152  007CC2  C008  FFD9         	movff	deplace@py,fsr2l
  2153  007CC6  C009  FFDA         	movff	deplace@py+1,fsr2h
  2154  007CCA  06DF               	decf	indf2,f,c
  2155  007CCC                     
  2156                           ;main.c: 201: lcd_gotoXY((*px)+1, (*py)+1);
  2157  007CCC  C008  FFD9         	movff	deplace@py,fsr2l
  2158  007CD0  C009  FFDA         	movff	deplace@py+1,fsr2h
  2159  007CD4  50DF               	movf	indf2,w,c
  2160  007CD6  6E0A               	movwf	??_deplace^0,c
  2161  007CD8  280A               	incf	??_deplace^0,w,c
  2162  007CDA  6E04               	movwf	lcd_gotoXY@y^0,c
  2163  007CDC  C006  FFD9         	movff	deplace@px,fsr2l
  2164  007CE0  C007  FFDA         	movff	deplace@px+1,fsr2h
  2165  007CE4  50DF               	movf	indf2,w,c
  2166  007CE6  6E0B               	movwf	(??_deplace+1)^0,c
  2167  007CE8  280B               	incf	(??_deplace+1)^0,w,c
  2168  007CEA  EC39  F03B         	call	_lcd_gotoXY
  2169                           
  2170                           ;main.c: 202: }else if(aY > 150){
  2171  007CEE  EF9F  F03E         	goto	l128
  2172  007CF2                     l1946:
  2173  007CF2  BE0F               	btfsc	(deplace@aY+1)^0,7,c
  2174  007CF4  EF85  F03E         	goto	u791
  2175  007CF8  500F               	movf	(deplace@aY+1)^0,w,c
  2176  007CFA  E109               	bnz	u790
  2177  007CFC  0E97               	movlw	151
  2178  007CFE  5C0E               	subwf	deplace@aY^0,w,c
  2179  007D00  A0D8               	btfss	status,0,c
  2180  007D02  EF85  F03E         	goto	u791
  2181  007D06  EF87  F03E         	goto	u790
  2182  007D0A                     u791:
  2183  007D0A  EF9F  F03E         	goto	l124
  2184  007D0E                     u790:
  2185  007D0E                     
  2186                           ;main.c: 203: (*py)++;
  2187  007D0E  C008  FFD9         	movff	deplace@py,fsr2l
  2188  007D12  C009  FFDA         	movff	deplace@py+1,fsr2h
  2189  007D16  2ADF               	incf	indf2,f,c
  2190  007D18                     
  2191                           ;main.c: 204: lcd_gotoXY((*px)+1, (*py)+1);
  2192  007D18  C008  FFD9         	movff	deplace@py,fsr2l
  2193  007D1C  C009  FFDA         	movff	deplace@py+1,fsr2h
  2194  007D20  50DF               	movf	indf2,w,c
  2195  007D22  6E0A               	movwf	??_deplace^0,c
  2196  007D24  280A               	incf	??_deplace^0,w,c
  2197  007D26  6E04               	movwf	lcd_gotoXY@y^0,c
  2198  007D28  C006  FFD9         	movff	deplace@px,fsr2l
  2199  007D2C  C007  FFDA         	movff	deplace@px+1,fsr2h
  2200  007D30  50DF               	movf	indf2,w,c
  2201  007D32  6E0B               	movwf	(??_deplace+1)^0,c
  2202  007D34  280B               	incf	(??_deplace+1)^0,w,c
  2203  007D36  EC39  F03B         	call	_lcd_gotoXY
  2204  007D3A  EF9F  F03E         	goto	l128
  2205  007D3E                     l124:
  2206  007D3E                     l128:
  2207  007D3E  0012               	return		;funcret
  2208  007D40                     __end_of_deplace:
  2209                           	opt callstack 0
  2210                           
  2211 ;; *************** function _getAnalog *****************
  2212 ;; Defined at:
  2213 ;;		line 247 in file "main.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  canal           1    wreg     unsigned char 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;  canal           1    1[COMRAM] unsigned char 
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  1    wreg      unsigned char 
  2220 ;; Registers used:
  2221 ;;		wreg, status,2, status,0
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2227 ;;      Params:         0       0       0       0       0       0       0
  2228 ;;      Locals:         1       0       0       0       0       0       0
  2229 ;;      Temps:          1       0       0       0       0       0       0
  2230 ;;      Totals:         2       0       0       0       0       0       0
  2231 ;;Total ram usage:        2 bytes
  2232 ;; Hardware stack levels used:    1
  2233 ;; This function calls:
  2234 ;;		Nothing
  2235 ;; This function is called by:
  2236 ;;		_deplace
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text15
  2241  007230                     __ptext15:
  2242                           	opt callstack 0
  2243  007230                     _getAnalog:
  2244                           	opt callstack 29
  2245                           
  2246                           ;incstack = 0
  2247                           ;getAnalog@canal stored from wreg
  2248  007230  6E02               	movwf	getAnalog@canal^0,c
  2249  007232                     
  2250                           ;main.c: 249: ADCON0bits.CHS = canal;
  2251  007232  C002  F001         	movff	getAnalog@canal,??_getAnalog
  2252  007236  4601               	rlncf	??_getAnalog^0,f,c
  2253  007238  4601               	rlncf	??_getAnalog^0,f,c
  2254  00723A  50C2               	movf	194,w,c	;volatile
  2255  00723C  1801               	xorwf	??_getAnalog^0,w,c
  2256  00723E  0BC3               	andlw	-61
  2257  007240  1801               	xorwf	??_getAnalog^0,w,c
  2258  007242  6EC2               	movwf	194,c	;volatile
  2259  007244                     
  2260                           ;main.c: 251: ADCON0bits.GO_DONE = 1;
  2261  007244  82C2               	bsf	194,1,c	;volatile
  2262  007246                     l140:
  2263  007246  B2C2               	btfsc	194,1,c	;volatile
  2264  007248  EF28  F039         	goto	u171
  2265  00724C  EF2A  F039         	goto	u170
  2266  007250                     u171:
  2267  007250  EF23  F039         	goto	l140
  2268  007254                     u170:
  2269  007254                     
  2270                           ;main.c: 254: return ADRESH;
  2271  007254  50C4               	movf	196,w,c	;volatile
  2272  007256  0012               	return		;funcret
  2273  007258                     __end_of_getAnalog:
  2274                           	opt callstack 0
  2275                           
  2276 ;; *************** function _afficheTabVue *****************
  2277 ;; Defined at:
  2278 ;;		line 77 in file "main.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;		None
  2281 ;; Auto vars:     Size  Location     Type
  2282 ;;  i               2    9[COMRAM] int 
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  1    wreg      void 
  2285 ;; Registers used:
  2286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2292 ;;      Params:         0       0       0       0       0       0       0
  2293 ;;      Locals:         2       0       0       0       0       0       0
  2294 ;;      Temps:          0       0       0       0       0       0       0
  2295 ;;      Totals:         2       0       0       0       0       0       0
  2296 ;;Total ram usage:        2 bytes
  2297 ;; Hardware stack levels used:    1
  2298 ;; Hardware stack levels required when called:    5
  2299 ;; This function calls:
  2300 ;;		___wmul
  2301 ;;		_lcd_effaceAffichage
  2302 ;;		_lcd_gotoXY
  2303 ;;		_lcd_putMessage
  2304 ;; This function is called by:
  2305 ;;		_main
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text16
  2310  007432                     __ptext16:
  2311                           	opt callstack 0
  2312  007432                     _afficheTabVue:
  2313                           	opt callstack 25
  2314  007432                     
  2315                           ;main.c: 78: lcd_effaceAffichage();
  2316  007432  ECED  F038         	call	_lcd_effaceAffichage	;wreg free
  2317  007436                     
  2318                           ;main.c: 79: for(int i = 0; i < 4; i++){
  2319  007436  0E00               	movlw	0
  2320  007438  6E0B               	movwf	(afficheTabVue@i+1)^0,c
  2321  00743A  0E00               	movlw	0
  2322  00743C  6E0A               	movwf	afficheTabVue@i^0,c
  2323  00743E                     l1918:
  2324                           
  2325                           ;main.c: 80: lcd_gotoXY(1, i+1);
  2326  00743E  280A               	incf	afficheTabVue@i^0,w,c
  2327  007440  6E04               	movwf	lcd_gotoXY@y^0,c
  2328  007442  0E01               	movlw	1
  2329  007444  EC39  F03B         	call	_lcd_gotoXY
  2330  007448                     
  2331                           ;main.c: 81: lcd_putMessage(m_tabVue[i]);
  2332  007448  C00A  F001         	movff	afficheTabVue@i,___wmul@multiplier
  2333  00744C  C00B  F002         	movff	afficheTabVue@i+1,___wmul@multiplier+1
  2334  007450  0E00               	movlw	0
  2335  007452  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2336  007454  0E15               	movlw	21
  2337  007456  6E03               	movwf	___wmul@multiplicand^0,c
  2338  007458  EC05  F039         	call	___wmul	;wreg free
  2339  00745C  0E00               	movlw	low _m_tabVue
  2340  00745E  2401               	addwf	?___wmul^0,w,c
  2341  007460  6E07               	movwf	lcd_putMessage@chaine^0,c
  2342  007462  0E01               	movlw	high _m_tabVue
  2343  007464  2002               	addwfc	(?___wmul+1)^0,w,c
  2344  007466  6E08               	movwf	(lcd_putMessage@chaine+1)^0,c
  2345  007468  EC8D  F039         	call	_lcd_putMessage	;wreg free
  2346  00746C  4A0A               	infsnz	afficheTabVue@i^0,f,c
  2347  00746E  2A0B               	incf	(afficheTabVue@i+1)^0,f,c
  2348  007470  BE0B               	btfsc	(afficheTabVue@i+1)^0,7,c
  2349  007472  EF44  F03A         	goto	u751
  2350  007476  500B               	movf	(afficheTabVue@i+1)^0,w,c
  2351  007478  E109               	bnz	u750
  2352  00747A  0E04               	movlw	4
  2353  00747C  5C0A               	subwf	afficheTabVue@i^0,w,c
  2354  00747E  A0D8               	btfss	status,0,c
  2355  007480  EF44  F03A         	goto	u751
  2356  007484  EF46  F03A         	goto	u750
  2357  007488                     u751:
  2358  007488  EF1F  F03A         	goto	l1918
  2359  00748C                     u750:
  2360  00748C  0012               	return		;funcret
  2361  00748E                     __end_of_afficheTabVue:
  2362                           	opt callstack 0
  2363                           
  2364 ;; *************** function _lcd_putMessage *****************
  2365 ;; Defined at:
  2366 ;;		line 411 in file "Lcd4Lignes.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;  chaine          2    6[COMRAM] PTR const unsigned char 
  2369 ;;		 -> m_tabMines(84), m_tabVue(84), 
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;  j               1    8[COMRAM] unsigned char 
  2372 ;; Return value:  Size  Location     Type
  2373 ;;                  1    wreg      void 
  2374 ;; Registers used:
  2375 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2376 ;; Tracked objects:
  2377 ;;		On entry : 0/0
  2378 ;;		On exit  : 0/0
  2379 ;;		Unchanged: 0/0
  2380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2381 ;;      Params:         2       0       0       0       0       0       0
  2382 ;;      Locals:         1       0       0       0       0       0       0
  2383 ;;      Temps:          0       0       0       0       0       0       0
  2384 ;;      Totals:         3       0       0       0       0       0       0
  2385 ;;Total ram usage:        3 bytes
  2386 ;; Hardware stack levels used:    1
  2387 ;; Hardware stack levels required when called:    4
  2388 ;; This function calls:
  2389 ;;		_lcd_ecritChar
  2390 ;; This function is called by:
  2391 ;;		_afficheTabVue
  2392 ;;		_afficheTabMine
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text17
  2397  00731A                     __ptext17:
  2398                           	opt callstack 0
  2399  00731A                     _lcd_putMessage:
  2400                           	opt callstack 25
  2401  00731A                     
  2402                           ;Lcd4Lignes.c: 413: unsigned char j;;Lcd4Lignes.c: 415: for(j = 0; chaine[j] != 0; j++)
  2403  00731A  0E00               	movlw	0
  2404  00731C  6E09               	movwf	lcd_putMessage@j^0,c
  2405  00731E  EF9B  F039         	goto	l1652
  2406  007322                     l1648:
  2407                           
  2408                           ;Lcd4Lignes.c: 416: lcd_ecritChar(chaine[j]);
  2409  007322  5009               	movf	lcd_putMessage@j^0,w,c
  2410  007324  2407               	addwf	lcd_putMessage@chaine^0,w,c
  2411  007326  6ED9               	movwf	fsr2l,c
  2412  007328  0E00               	movlw	0
  2413  00732A  2008               	addwfc	(lcd_putMessage@chaine+1)^0,w,c
  2414  00732C  6EDA               	movwf	fsr2h,c
  2415  00732E  50DF               	movf	indf2,w,c
  2416  007330  ECCA  F039         	call	_lcd_ecritChar
  2417  007334  2A09               	incf	lcd_putMessage@j^0,f,c
  2418  007336                     l1652:
  2419  007336  5009               	movf	lcd_putMessage@j^0,w,c
  2420  007338  2407               	addwf	lcd_putMessage@chaine^0,w,c
  2421  00733A  6ED9               	movwf	fsr2l,c
  2422  00733C  0E00               	movlw	0
  2423  00733E  2008               	addwfc	(lcd_putMessage@chaine+1)^0,w,c
  2424  007340  6EDA               	movwf	fsr2h,c
  2425  007342  50DF               	movf	indf2,w,c
  2426  007344  A4D8               	btfss	status,2,c
  2427  007346  EFA7  F039         	goto	u471
  2428  00734A  EFA9  F039         	goto	u470
  2429  00734E                     u471:
  2430  00734E  EF91  F039         	goto	l1648
  2431  007352                     u470:
  2432  007352  0012               	return		;funcret
  2433  007354                     __end_of_lcd_putMessage:
  2434                           	opt callstack 0
  2435                           
  2436 ;; *************** function _lcd_ecritChar *****************
  2437 ;; Defined at:
  2438 ;;		line 383 in file "Lcd4Lignes.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;  car             1    wreg     unsigned char 
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;  car             1    3[COMRAM] unsigned char 
  2443 ;;  posRam          1    4[COMRAM] unsigned char 
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      void 
  2446 ;; Registers used:
  2447 ;;		wreg, status,2, status,0, cstack
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2453 ;;      Params:         0       0       0       0       0       0       0
  2454 ;;      Locals:         2       0       0       0       0       0       0
  2455 ;;      Temps:          0       0       0       0       0       0       0
  2456 ;;      Totals:         2       0       0       0       0       0       0
  2457 ;;Total ram usage:        2 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    3
  2460 ;; This function calls:
  2461 ;;		_lcd_wrCom
  2462 ;;		_lcd_wrData
  2463 ;; This function is called by:
  2464 ;;		_lcd_putMessage
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           	psect	text18
  2469  007394                     __ptext18:
  2470                           	opt callstack 0
  2471  007394                     _lcd_ecritChar:
  2472                           	opt callstack 25
  2473                           
  2474                           ;incstack = 0
  2475                           ;lcd_ecritChar@car stored from wreg
  2476  007394  6E04               	movwf	lcd_ecritChar@car^0,c
  2477  007396                     
  2478                           ;Lcd4Lignes.c: 385: unsigned char posRam;;Lcd4Lignes.c: 387: posRam = lcd_wrData(car);
  2479  007396  5004               	movf	lcd_ecritChar@car^0,w,c
  2480  007398  EC40  F039         	call	_lcd_wrData
  2481  00739C  6E05               	movwf	lcd_ecritChar@posRam^0,c
  2482                           
  2483                           ;Lcd4Lignes.c: 388: switch(posRam)
  2484  00739E  EFE0  F039         	goto	l1612
  2485  0073A2                     l1604:
  2486                           
  2487                           ;Lcd4Lignes.c: 391: lcd_wrCom(0xC0|0x80);
  2488  0073A2  0EC0               	movlw	192
  2489  0073A4  ECA5  F03A         	call	_lcd_wrCom
  2490                           
  2491                           ;Lcd4Lignes.c: 392: break;
  2492  0073A8  EFEF  F039         	goto	l220
  2493  0073AC                     l1606:
  2494                           
  2495                           ;Lcd4Lignes.c: 394: lcd_wrCom(0x94|0x80);
  2496  0073AC  0E94               	movlw	148
  2497  0073AE  ECA5  F03A         	call	_lcd_wrCom
  2498                           
  2499                           ;Lcd4Lignes.c: 395: break;
  2500  0073B2  EFEF  F039         	goto	l220
  2501  0073B6                     l1608:
  2502                           
  2503                           ;Lcd4Lignes.c: 397: lcd_wrCom(0xD4|0x80);
  2504  0073B6  0ED4               	movlw	212
  2505  0073B8  ECA5  F03A         	call	_lcd_wrCom
  2506                           
  2507                           ;Lcd4Lignes.c: 398: break;
  2508  0073BC  EFEF  F039         	goto	l220
  2509  0073C0                     l1612:
  2510  0073C0  5005               	movf	lcd_ecritChar@posRam^0,w,c
  2511                           
  2512                           ; Switch size 1, requested type "simple"
  2513                           ; Number of cases is 3, Range of values is 148 to 212
  2514                           ; switch strategies available:
  2515                           ; Name         Instructions Cycles
  2516                           ; simple_byte           10     6 (average)
  2517                           ;	Chosen strategy is simple_byte
  2518  0073C2  0A94               	xorlw	148	; case 148
  2519  0073C4  B4D8               	btfsc	status,2,c
  2520  0073C6  EFD1  F039         	goto	l1604
  2521  0073CA  0A54               	xorlw	84	; case 192
  2522  0073CC  B4D8               	btfsc	status,2,c
  2523  0073CE  EFDB  F039         	goto	l1608
  2524  0073D2  0A14               	xorlw	20	; case 212
  2525  0073D4  B4D8               	btfsc	status,2,c
  2526  0073D6  EFD6  F039         	goto	l1606
  2527  0073DA  EFEF  F039         	goto	l220
  2528  0073DE                     l220:
  2529  0073DE  0012               	return		;funcret
  2530  0073E0                     __end_of_lcd_ecritChar:
  2531                           	opt callstack 0
  2532                           
  2533 ;; *************** function _lcd_wrData *****************
  2534 ;; Defined at:
  2535 ;;		line 212 in file "Lcd4Lignes.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;  caractere       1    wreg     unsigned char 
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;  caractere       1    2[COMRAM] unsigned char 
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      unsigned char 
  2542 ;; Registers used:
  2543 ;;		wreg, status,2, status,0, cstack
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2549 ;;      Params:         0       0       0       0       0       0       0
  2550 ;;      Locals:         1       0       0       0       0       0       0
  2551 ;;      Temps:          0       0       0       0       0       0       0
  2552 ;;      Totals:         1       0       0       0       0       0       0
  2553 ;;Total ram usage:        1 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:    2
  2556 ;; This function calls:
  2557 ;;		_lcd_busy
  2558 ;;		_lcd_ecrireDonnees
  2559 ;;		_lcd_strobeEnableBit
  2560 ;; This function is called by:
  2561 ;;		_lcd_ecritChar
  2562 ;;		_lcd_initCGRam
  2563 ;;		_lcd_effaceChar
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           	psect	text19
  2568  007280                     __ptext19:
  2569                           	opt callstack 0
  2570  007280                     _lcd_wrData:
  2571                           	opt callstack 26
  2572                           
  2573                           ;incstack = 0
  2574                           ;lcd_wrData@caractere stored from wreg
  2575  007280  6E03               	movwf	lcd_wrData@caractere^0,c
  2576  007282                     
  2577                           ;Lcd4Lignes.c: 214: lcd_busy();
  2578  007282  EC71  F039         	call	_lcd_busy	;wreg free
  2579  007286                     
  2580                           ;Lcd4Lignes.c: 215: TRISD = 0b00000000;
  2581  007286  0E00               	movlw	0
  2582  007288  6E95               	movwf	149,c	;volatile
  2583  00728A                     
  2584                           ;Lcd4Lignes.c: 218: PORTAbits.RA0 = 1;
  2585  00728A  8080               	bsf	128,0,c	;volatile
  2586  00728C                     
  2587                           ;Lcd4Lignes.c: 219: PORTAbits.RA1 = 0;
  2588  00728C  9280               	bcf	128,1,c	;volatile
  2589  00728E                     
  2590                           ;Lcd4Lignes.c: 221: lcd_ecrireDonnees(caractere >> 4);
  2591  00728E  3803               	swapf	lcd_wrData@caractere^0,w,c
  2592  007290  0B0F               	andlw	15
  2593  007292  ECFB  F038         	call	_lcd_ecrireDonnees
  2594  007296                     
  2595                           ;Lcd4Lignes.c: 222: lcd_strobeEnableBit();
  2596  007296  ECE5  F038         	call	_lcd_strobeEnableBit	;wreg free
  2597  00729A                     
  2598                           ;Lcd4Lignes.c: 225: lcd_ecrireDonnees(caractere);
  2599  00729A  5003               	movf	lcd_wrData@caractere^0,w,c
  2600  00729C  ECFB  F038         	call	_lcd_ecrireDonnees
  2601  0072A0                     
  2602                           ;Lcd4Lignes.c: 226: lcd_strobeEnableBit();
  2603  0072A0  ECE5  F038         	call	_lcd_strobeEnableBit	;wreg free
  2604  0072A4                     
  2605                           ;Lcd4Lignes.c: 229: TRISD = 0b00001111;
  2606  0072A4  0E0F               	movlw	15
  2607  0072A6  6E95               	movwf	149,c	;volatile
  2608  0072A8                     
  2609                           ;Lcd4Lignes.c: 230: _delay((unsigned long)((2)*(1000000/4000000.0)));
  2610                           ;Lcd4Lignes.c: 231: return(lcd_busy());
  2611  0072A8  EC71  F039         	call	_lcd_busy	;wreg free
  2612  0072AC  0012               	return		;funcret
  2613  0072AE                     __end_of_lcd_wrData:
  2614                           	opt callstack 0
  2615                           
  2616 ;; *************** function _lcd_gotoXY *****************
  2617 ;; Defined at:
  2618 ;;		line 338 in file "Lcd4Lignes.c"
  2619 ;; Parameters:    Size  Location     Type
  2620 ;;  x               1    wreg     unsigned char 
  2621 ;;  y               1    3[COMRAM] unsigned char 
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;  x               1    4[COMRAM] unsigned char 
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  1    wreg      void 
  2626 ;; Registers used:
  2627 ;;		wreg, status,2, status,0, cstack
  2628 ;; Tracked objects:
  2629 ;;		On entry : 0/0
  2630 ;;		On exit  : 0/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2633 ;;      Params:         1       0       0       0       0       0       0
  2634 ;;      Locals:         1       0       0       0       0       0       0
  2635 ;;      Temps:          0       0       0       0       0       0       0
  2636 ;;      Totals:         2       0       0       0       0       0       0
  2637 ;;Total ram usage:        2 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; Hardware stack levels required when called:    3
  2640 ;; This function calls:
  2641 ;;		_lcd_wrCom
  2642 ;; This function is called by:
  2643 ;;		_afficheTabVue
  2644 ;;		_deplace
  2645 ;;		_afficheTabMine
  2646 ;;		_lcd_effaceLigne
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           	psect	text20
  2651  007672                     __ptext20:
  2652                           	opt callstack 0
  2653  007672                     _lcd_gotoXY:
  2654                           	opt callstack 26
  2655                           
  2656                           ;incstack = 0
  2657                           ;lcd_gotoXY@x stored from wreg
  2658  007672  6E05               	movwf	lcd_gotoXY@x^0,c
  2659  007674                     
  2660                           ;Lcd4Lignes.c: 340: switch(y)
  2661  007674  EF58  F03B         	goto	l1644
  2662  007678                     l1634:
  2663                           
  2664                           ;Lcd4Lignes.c: 343: lcd_wrCom((x-1+0x80)|0x80);
  2665  007678  5005               	movf	lcd_gotoXY@x^0,w,c
  2666  00767A  0F7F               	addlw	127
  2667  00767C  0980               	iorlw	128
  2668  00767E  ECA5  F03A         	call	_lcd_wrCom
  2669                           
  2670                           ;Lcd4Lignes.c: 344: break;
  2671  007682  EF6B  F03B         	goto	l209
  2672  007686                     l1636:
  2673                           
  2674                           ;Lcd4Lignes.c: 346: lcd_wrCom((x-1+0xC0)|0x80);
  2675  007686  5005               	movf	lcd_gotoXY@x^0,w,c
  2676  007688  0FBF               	addlw	191
  2677  00768A  0980               	iorlw	128
  2678  00768C  ECA5  F03A         	call	_lcd_wrCom
  2679                           
  2680                           ;Lcd4Lignes.c: 347: break;
  2681  007690  EF6B  F03B         	goto	l209
  2682  007694                     l1638:
  2683                           
  2684                           ;Lcd4Lignes.c: 349: lcd_wrCom((x-1+0x94)|0x80);
  2685  007694  5005               	movf	lcd_gotoXY@x^0,w,c
  2686  007696  0F93               	addlw	147
  2687  007698  0980               	iorlw	128
  2688  00769A  ECA5  F03A         	call	_lcd_wrCom
  2689                           
  2690                           ;Lcd4Lignes.c: 350: break;
  2691  00769E  EF6B  F03B         	goto	l209
  2692  0076A2                     l1640:
  2693                           
  2694                           ;Lcd4Lignes.c: 352: lcd_wrCom((x-1+0xD4)|0x80);
  2695  0076A2  5005               	movf	lcd_gotoXY@x^0,w,c
  2696  0076A4  0FD3               	addlw	211
  2697  0076A6  0980               	iorlw	128
  2698  0076A8  ECA5  F03A         	call	_lcd_wrCom
  2699                           
  2700                           ;Lcd4Lignes.c: 353: break;
  2701  0076AC  EF6B  F03B         	goto	l209
  2702  0076B0                     l1644:
  2703  0076B0  5004               	movf	lcd_gotoXY@y^0,w,c
  2704                           
  2705                           ; Switch size 1, requested type "simple"
  2706                           ; Number of cases is 4, Range of values is 1 to 4
  2707                           ; switch strategies available:
  2708                           ; Name         Instructions Cycles
  2709                           ; simple_byte           13     7 (average)
  2710                           ;	Chosen strategy is simple_byte
  2711  0076B2  0A01               	xorlw	1	; case 1
  2712  0076B4  B4D8               	btfsc	status,2,c
  2713  0076B6  EF3C  F03B         	goto	l1634
  2714  0076BA  0A03               	xorlw	3	; case 2
  2715  0076BC  B4D8               	btfsc	status,2,c
  2716  0076BE  EF43  F03B         	goto	l1636
  2717  0076C2  0A01               	xorlw	1	; case 3
  2718  0076C4  B4D8               	btfsc	status,2,c
  2719  0076C6  EF4A  F03B         	goto	l1638
  2720  0076CA  0A07               	xorlw	7	; case 4
  2721  0076CC  B4D8               	btfsc	status,2,c
  2722  0076CE  EF51  F03B         	goto	l1640
  2723  0076D2  EF6B  F03B         	goto	l209
  2724  0076D6                     l209:
  2725  0076D6  0012               	return		;funcret
  2726  0076D8                     __end_of_lcd_gotoXY:
  2727                           	opt callstack 0
  2728                           
  2729 ;; *************** function _lcd_effaceAffichage *****************
  2730 ;; Defined at:
  2731 ;;		line 300 in file "Lcd4Lignes.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;		None
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;		None
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		wreg, status,2, status,0, cstack
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2745 ;;      Params:         0       0       0       0       0       0       0
  2746 ;;      Locals:         0       0       0       0       0       0       0
  2747 ;;      Temps:          0       0       0       0       0       0       0
  2748 ;;      Totals:         0       0       0       0       0       0       0
  2749 ;;Total ram usage:        0 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    3
  2752 ;; This function calls:
  2753 ;;		_lcd_wrCom
  2754 ;; This function is called by:
  2755 ;;		_main
  2756 ;;		_afficheTabVue
  2757 ;;		_afficheTabMine
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text21
  2762  0071DA                     __ptext21:
  2763                           	opt callstack 0
  2764  0071DA                     _lcd_effaceAffichage:
  2765                           	opt callstack 27
  2766  0071DA                     
  2767                           ;Lcd4Lignes.c: 302: lcd_wrCom(0x01);
  2768  0071DA  0E01               	movlw	1
  2769  0071DC  ECA5  F03A         	call	_lcd_wrCom
  2770                           
  2771                           ;Lcd4Lignes.c: 303: lcd_wrCom(0x80);
  2772  0071E0  0E80               	movlw	128
  2773  0071E2  ECA5  F03A         	call	_lcd_wrCom
  2774  0071E6  0012               	return		;funcret
  2775  0071E8                     __end_of_lcd_effaceAffichage:
  2776                           	opt callstack 0
  2777                           
  2778 ;; *************** function _lcd_wrCom *****************
  2779 ;; Defined at:
  2780 ;;		line 180 in file "Lcd4Lignes.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  commande        1    wreg     unsigned char 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;  commande        1    2[COMRAM] unsigned char 
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  1    wreg      unsigned char 
  2787 ;; Registers used:
  2788 ;;		wreg, status,2, status,0, cstack
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2794 ;;      Params:         0       0       0       0       0       0       0
  2795 ;;      Locals:         1       0       0       0       0       0       0
  2796 ;;      Temps:          0       0       0       0       0       0       0
  2797 ;;      Totals:         1       0       0       0       0       0       0
  2798 ;;Total ram usage:        1 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    2
  2801 ;; This function calls:
  2802 ;;		_lcd_busy
  2803 ;;		_lcd_ecrireDonnees
  2804 ;;		_lcd_strobeEnableBit
  2805 ;; This function is called by:
  2806 ;;		_lcd_init
  2807 ;;		_lcd_effaceAffichage
  2808 ;;		_lcd_curseurHome
  2809 ;;		_lcd_gotoXY
  2810 ;;		_lcd_ecritChar
  2811 ;;		_lcd_initCGRam
  2812 ;;		_lcd_cacheCurseur
  2813 ;;		_lcd_montreCurseur
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           	psect	text22
  2818  00754A                     __ptext22:
  2819                           	opt callstack 0
  2820  00754A                     _lcd_wrCom:
  2821                           	opt callstack 27
  2822                           
  2823                           ;incstack = 0
  2824                           ;lcd_wrCom@commande stored from wreg
  2825  00754A  6E03               	movwf	lcd_wrCom@commande^0,c
  2826  00754C                     
  2827                           ;Lcd4Lignes.c: 182: lcd_busy();
  2828  00754C  EC71  F039         	call	_lcd_busy	;wreg free
  2829  007550                     
  2830                           ;Lcd4Lignes.c: 184: TRISD = 0b00000000;
  2831  007550  0E00               	movlw	0
  2832  007552  6E95               	movwf	149,c	;volatile
  2833  007554                     
  2834                           ;Lcd4Lignes.c: 187: PORTAbits.RA0 = 0;
  2835  007554  9080               	bcf	128,0,c	;volatile
  2836  007556                     
  2837                           ;Lcd4Lignes.c: 188: PORTAbits.RA1 = 0;
  2838  007556  9280               	bcf	128,1,c	;volatile
  2839  007558                     
  2840                           ;Lcd4Lignes.c: 190: lcd_ecrireDonnees(commande >> 4);
  2841  007558  3803               	swapf	lcd_wrCom@commande^0,w,c
  2842  00755A  0B0F               	andlw	15
  2843  00755C  ECFB  F038         	call	_lcd_ecrireDonnees
  2844  007560                     
  2845                           ;Lcd4Lignes.c: 191: lcd_strobeEnableBit();
  2846  007560  ECE5  F038         	call	_lcd_strobeEnableBit	;wreg free
  2847  007564                     
  2848                           ;Lcd4Lignes.c: 194: lcd_ecrireDonnees(commande);
  2849  007564  5003               	movf	lcd_wrCom@commande^0,w,c
  2850  007566  ECFB  F038         	call	_lcd_ecrireDonnees
  2851  00756A                     
  2852                           ;Lcd4Lignes.c: 195: lcd_strobeEnableBit();
  2853  00756A  ECE5  F038         	call	_lcd_strobeEnableBit	;wreg free
  2854  00756E                     
  2855                           ;Lcd4Lignes.c: 196: _delay((unsigned long)((40)*(1000000/4000000.0)));
  2856  00756E  0E03               	movlw	3
  2857  007570                     u887:
  2858  007570  2EE8               	decfsz	wreg,f,c
  2859  007572  D7FE               	bra	u887
  2860  007574  F000               	nop	
  2861  007576                     
  2862                           ;Lcd4Lignes.c: 198: if ((commande == 0x01) || commande == 0x02)
  2863  007576  0403               	decf	lcd_wrCom@commande^0,w,c
  2864  007578  B4D8               	btfsc	status,2,c
  2865  00757A  EFC1  F03A         	goto	u431
  2866  00757E  EFC3  F03A         	goto	u430
  2867  007582                     u431:
  2868  007582  EFCC  F03A         	goto	l1562
  2869  007586                     u430:
  2870  007586  0E02               	movlw	2
  2871  007588  1803               	xorwf	lcd_wrCom@commande^0,w,c
  2872  00758A  A4D8               	btfss	status,2,c
  2873  00758C  EFCA  F03A         	goto	u441
  2874  007590  EFCC  F03A         	goto	u440
  2875  007594                     u441:
  2876  007594  EFD1  F03A         	goto	l1564
  2877  007598                     u440:
  2878  007598                     l1562:
  2879                           
  2880                           ;Lcd4Lignes.c: 199: _delay((unsigned long)((2)*(1000000/4000.0)));
  2881  007598  0EA6               	movlw	166
  2882  00759A                     u897:
  2883  00759A  2EE8               	decfsz	wreg,f,c
  2884  00759C  D7FE               	bra	u897
  2885  00759E  F000 F000          	nop2	
  2886  0075A2                     l1564:
  2887                           
  2888                           ;Lcd4Lignes.c: 201: TRISD = 0b00001111;
  2889  0075A2  0E0F               	movlw	15
  2890  0075A4  6E95               	movwf	149,c	;volatile
  2891  0075A6                     
  2892                           ;Lcd4Lignes.c: 203: return(lcd_busy());;	Return value of _lcd_wrCom is never used
  2893  0075A6  EC71  F039         	call	_lcd_busy	;wreg free
  2894  0075AA  0012               	return		;funcret
  2895  0075AC                     __end_of_lcd_wrCom:
  2896                           	opt callstack 0
  2897                           
  2898 ;; *************** function _lcd_strobeEnableBit *****************
  2899 ;; Defined at:
  2900 ;;		line 455 in file "Lcd4Lignes.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;		None
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;		None
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  1    wreg      void 
  2907 ;; Registers used:
  2908 ;;		None
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2914 ;;      Params:         0       0       0       0       0       0       0
  2915 ;;      Locals:         0       0       0       0       0       0       0
  2916 ;;      Temps:          0       0       0       0       0       0       0
  2917 ;;      Totals:         0       0       0       0       0       0       0
  2918 ;;Total ram usage:        0 bytes
  2919 ;; Hardware stack levels used:    1
  2920 ;; This function calls:
  2921 ;;		Nothing
  2922 ;; This function is called by:
  2923 ;;		_lcd_wrCom
  2924 ;;		_lcd_wrData
  2925 ;;		_lcd_resetSequence
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           	psect	text23
  2930  0071CA                     __ptext23:
  2931                           	opt callstack 0
  2932  0071CA                     _lcd_strobeEnableBit:
  2933                           	opt callstack 28
  2934  0071CA                     
  2935                           ;Lcd4Lignes.c: 457: PORTAbits.RA2 = 1;
  2936  0071CA  8480               	bsf	128,2,c	;volatile
  2937                           
  2938                           ;Lcd4Lignes.c: 458: __nop();
  2939  0071CC  F000               	nop	
  2940                           
  2941                           ;Lcd4Lignes.c: 459: PORTAbits.RA2 = 0;
  2942  0071CE  9480               	bcf	128,2,c	;volatile
  2943  0071D0  0012               	return		;funcret
  2944  0071D2                     __end_of_lcd_strobeEnableBit:
  2945                           	opt callstack 0
  2946                           
  2947 ;; *************** function _lcd_ecrireDonnees *****************
  2948 ;; Defined at:
  2949 ;;		line 131 in file "Lcd4Lignes.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;  donnee          1    wreg     unsigned char 
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;  donnee          1    1[COMRAM] unsigned char 
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		wreg, status,2, status,0
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2963 ;;      Params:         0       0       0       0       0       0       0
  2964 ;;      Locals:         1       0       0       0       0       0       0
  2965 ;;      Temps:          1       0       0       0       0       0       0
  2966 ;;      Totals:         2       0       0       0       0       0       0
  2967 ;;Total ram usage:        2 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; This function calls:
  2970 ;;		Nothing
  2971 ;; This function is called by:
  2972 ;;		_lcd_wrCom
  2973 ;;		_lcd_wrData
  2974 ;;		_lcd_resetSequence
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           	psect	text24
  2979  0071F6                     __ptext24:
  2980                           	opt callstack 0
  2981  0071F6                     _lcd_ecrireDonnees:
  2982                           	opt callstack 28
  2983                           
  2984                           ;incstack = 0
  2985                           ;lcd_ecrireDonnees@donnee stored from wreg
  2986  0071F6  6E02               	movwf	lcd_ecrireDonnees@donnee^0,c
  2987  0071F8                     
  2988                           ;Lcd4Lignes.c: 134: PORTD = (donnee & 0x0F) | (PORTD & 0xF0);
  2989  0071F8  CF83 F001          	movff	3971,??_lcd_ecrireDonnees	;volatile
  2990  0071FC  0EF0               	movlw	240
  2991  0071FE  1601               	andwf	??_lcd_ecrireDonnees^0,f,c
  2992  007200  5002               	movf	lcd_ecrireDonnees@donnee^0,w,c
  2993  007202  0B0F               	andlw	15
  2994  007204  1001               	iorwf	??_lcd_ecrireDonnees^0,w,c
  2995  007206  6E83               	movwf	131,c	;volatile
  2996  007208  0012               	return		;funcret
  2997  00720A                     __end_of_lcd_ecrireDonnees:
  2998                           	opt callstack 0
  2999                           
  3000 ;; *************** function _lcd_busy *****************
  3001 ;; Defined at:
  3002 ;;		line 148 in file "Lcd4Lignes.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;		None
  3005 ;; Auto vars:     Size  Location     Type
  3006 ;;  adresse         1    1[COMRAM] unsigned char 
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  1    wreg      unsigned char 
  3009 ;; Registers used:
  3010 ;;		wreg, status,2, status,0, cstack
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3016 ;;      Params:         0       0       0       0       0       0       0
  3017 ;;      Locals:         1       0       0       0       0       0       0
  3018 ;;      Temps:          1       0       0       0       0       0       0
  3019 ;;      Totals:         2       0       0       0       0       0       0
  3020 ;;Total ram usage:        2 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    1
  3023 ;; This function calls:
  3024 ;;		_lcd_lireDonnees
  3025 ;; This function is called by:
  3026 ;;		_lcd_wrCom
  3027 ;;		_lcd_wrData
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           	psect	text25
  3032  0072E2                     __ptext25:
  3033                           	opt callstack 0
  3034  0072E2                     _lcd_busy:
  3035                           	opt callstack 27
  3036  0072E2                     
  3037                           ;Lcd4Lignes.c: 150: unsigned char adresse;;Lcd4Lignes.c: 152: PORTAbits.RA0 = 0;
  3038  0072E2  9080               	bcf	128,0,c	;volatile
  3039                           
  3040                           ;Lcd4Lignes.c: 153: PORTAbits.RA1 = 1;
  3041  0072E4  8280               	bsf	128,1,c	;volatile
  3042  0072E6                     l171:
  3043                           
  3044                           ;Lcd4Lignes.c: 156: {;Lcd4Lignes.c: 157: PORTAbits.RA2 = 1;
  3045  0072E6  8480               	bsf	128,2,c	;volatile
  3046                           
  3047                           ;Lcd4Lignes.c: 158: __nop();
  3048  0072E8  F000               	nop	
  3049  0072EA                     
  3050                           ;Lcd4Lignes.c: 159: adresse = lcd_lireDonnees() << 4;
  3051  0072EA  ECE2  F038         	call	_lcd_lireDonnees	;wreg free
  3052  0072EE  6E01               	movwf	??_lcd_busy^0,c
  3053  0072F0  3801               	swapf	??_lcd_busy^0,w,c
  3054  0072F2  0BF0               	andlw	240
  3055  0072F4  6E02               	movwf	lcd_busy@adresse^0,c
  3056  0072F6                     
  3057                           ;Lcd4Lignes.c: 160: PORTAbits.RA2 = 0;
  3058  0072F6  9480               	bcf	128,2,c	;volatile
  3059  0072F8                     
  3060                           ;Lcd4Lignes.c: 162: PORTAbits.RA2 = 1;
  3061  0072F8  8480               	bsf	128,2,c	;volatile
  3062  0072FA                     
  3063                           ;Lcd4Lignes.c: 163: __nop();
  3064  0072FA  F000               	nop	
  3065                           
  3066                           ;Lcd4Lignes.c: 164: adresse |= lcd_lireDonnees();
  3067  0072FC  ECE2  F038         	call	_lcd_lireDonnees	;wreg free
  3068  007300  1202               	iorwf	lcd_busy@adresse^0,f,c
  3069  007302                     
  3070                           ;Lcd4Lignes.c: 165: PORTAbits.RA2 = 0;
  3071  007302  9480               	bcf	128,2,c	;volatile
  3072  007304                     
  3073                           ;Lcd4Lignes.c: 167: };Lcd4Lignes.c: 168: while(adresse&0x80);
  3074  007304  BE02               	btfsc	lcd_busy@adresse^0,7,c
  3075  007306  EF87  F039         	goto	u421
  3076  00730A  EF89  F039         	goto	u420
  3077  00730E                     u421:
  3078  00730E  EF73  F039         	goto	l171
  3079  007312                     u420:
  3080  007312                     
  3081                           ;Lcd4Lignes.c: 170: PORTAbits.RA1 = 0;
  3082  007312  9280               	bcf	128,1,c	;volatile
  3083  007314                     
  3084                           ;Lcd4Lignes.c: 171: return(adresse&0x7f);
  3085  007314  5002               	movf	lcd_busy@adresse^0,w,c
  3086  007316  0B7F               	andlw	127
  3087  007318  0012               	return		;funcret
  3088  00731A                     __end_of_lcd_busy:
  3089                           	opt callstack 0
  3090                           
  3091 ;; *************** function _lcd_lireDonnees *****************
  3092 ;; Defined at:
  3093 ;;		line 117 in file "Lcd4Lignes.c"
  3094 ;; Parameters:    Size  Location     Type
  3095 ;;		None
  3096 ;; Auto vars:     Size  Location     Type
  3097 ;;		None
  3098 ;; Return value:  Size  Location     Type
  3099 ;;                  1    wreg      unsigned char 
  3100 ;; Registers used:
  3101 ;;		wreg, status,2, status,0
  3102 ;; Tracked objects:
  3103 ;;		On entry : 0/0
  3104 ;;		On exit  : 0/0
  3105 ;;		Unchanged: 0/0
  3106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3107 ;;      Params:         0       0       0       0       0       0       0
  3108 ;;      Locals:         0       0       0       0       0       0       0
  3109 ;;      Temps:          0       0       0       0       0       0       0
  3110 ;;      Totals:         0       0       0       0       0       0       0
  3111 ;;Total ram usage:        0 bytes
  3112 ;; Hardware stack levels used:    1
  3113 ;; This function calls:
  3114 ;;		Nothing
  3115 ;; This function is called by:
  3116 ;;		_lcd_busy
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120                           	psect	text26
  3121  0071C4                     __ptext26:
  3122                           	opt callstack 0
  3123  0071C4                     _lcd_lireDonnees:
  3124                           	opt callstack 27
  3125  0071C4                     
  3126                           ;Lcd4Lignes.c: 120: return (PORTD & 0x0f);
  3127  0071C4  5083               	movf	131,w,c	;volatile
  3128  0071C6  0B0F               	andlw	15
  3129  0071C8  0012               	return		;funcret
  3130  0071CA                     __end_of_lcd_lireDonnees:
  3131                           	opt callstack 0
  3132                           
  3133 ;; *************** function ___wmul *****************
  3134 ;; Defined at:
  3135 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;  multiplier      2    0[COMRAM] unsigned int 
  3138 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;  product         2    4[COMRAM] unsigned int 
  3141 ;; Return value:  Size  Location     Type
  3142 ;;                  2    0[COMRAM] unsigned int 
  3143 ;; Registers used:
  3144 ;;		wreg, status,2, status,0, prodl, prodh
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3150 ;;      Params:         4       0       0       0       0       0       0
  3151 ;;      Locals:         2       0       0       0       0       0       0
  3152 ;;      Temps:          0       0       0       0       0       0       0
  3153 ;;      Totals:         6       0       0       0       0       0       0
  3154 ;;Total ram usage:        6 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; This function calls:
  3157 ;;		Nothing
  3158 ;; This function is called by:
  3159 ;;		_afficheTabVue
  3160 ;;		_initTabVue
  3161 ;;		_rempliMines
  3162 ;;		_metToucheCombien
  3163 ;;		_calculToucheCombien
  3164 ;;		_afficheTabMine
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           	psect	text27
  3169  00720A                     __ptext27:
  3170                           	opt callstack 0
  3171  00720A                     ___wmul:
  3172                           	opt callstack 29
  3173  00720A  5001               	movf	___wmul@multiplier^0,w,c
  3174  00720C  0203               	mulwf	___wmul@multiplicand^0,c
  3175  00720E  CFF3 F005          	movff	prodl,___wmul@product
  3176  007212  CFF4 F006          	movff	prodh,___wmul@product+1
  3177  007216  5001               	movf	___wmul@multiplier^0,w,c
  3178  007218  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  3179  00721A  50F3               	movf	243,w,c
  3180  00721C  2606               	addwf	(___wmul@product+1)^0,f,c
  3181  00721E  5002               	movf	(___wmul@multiplier+1)^0,w,c
  3182  007220  0203               	mulwf	___wmul@multiplicand^0,c
  3183  007222  50F3               	movf	243,w,c
  3184  007224  2606               	addwf	(___wmul@product+1)^0,f,c
  3185  007226  C005  F001         	movff	___wmul@product,?___wmul
  3186  00722A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3187  00722E  0012               	return		;funcret
  3188  007230                     __end_of___wmul:
  3189                           	opt callstack 0
  3190  0000                     
  3191                           	psect	rparam
  3192  0000                     tosu	equ	0xFFF
  3193                           tosh	equ	0xFFE
  3194                           tosl	equ	0xFFD
  3195                           stkptr	equ	0xFFC
  3196                           pclatu	equ	0xFFB
  3197                           pclath	equ	0xFFA
  3198                           pcl	equ	0xFF9
  3199                           tblptru	equ	0xFF8
  3200                           tblptrh	equ	0xFF7
  3201                           tblptrl	equ	0xFF6
  3202                           tablat	equ	0xFF5
  3203                           prodh	equ	0xFF4
  3204                           prodl	equ	0xFF3
  3205                           indf0	equ	0xFEF
  3206                           postinc0	equ	0xFEE
  3207                           postdec0	equ	0xFED
  3208                           preinc0	equ	0xFEC
  3209                           plusw0	equ	0xFEB
  3210                           fsr0h	equ	0xFEA
  3211                           fsr0l	equ	0xFE9
  3212                           wreg	equ	0xFE8
  3213                           indf1	equ	0xFE7
  3214                           postinc1	equ	0xFE6
  3215                           postdec1	equ	0xFE5
  3216                           preinc1	equ	0xFE4
  3217                           plusw1	equ	0xFE3
  3218                           fsr1h	equ	0xFE2
  3219                           fsr1l	equ	0xFE1
  3220                           bsr	equ	0xFE0
  3221                           indf2	equ	0xFDF
  3222                           postinc2	equ	0xFDE
  3223                           postdec2	equ	0xFDD
  3224                           preinc2	equ	0xFDC
  3225                           plusw2	equ	0xFDB
  3226                           fsr2h	equ	0xFDA
  3227                           fsr2l	equ	0xFD9
  3228                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        68
    BSS         168
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     36      40
    BANK0           160      0     148
    BANK1           256      0      84
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    lcd_putMessage@chaine	PTR const unsigned char  size(2) Largest target is 84
		 -> m_tabMines(BANK0[84]), m_tabVue(BANK1[84]), 

    deplace@py	PTR unsigned char  size(2) Largest target is 1
		 -> main@y(COMRAM[1]), 

    deplace@px	PTR unsigned char  size(2) Largest target is 1
		 -> main@x(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_rempliMines
    _rempliMines->___awmod
    _rand->___lmul
    ___awmod->_rand
    _metToucheCombien->_calculToucheCombien
    _calculToucheCombien->___wmul
    _lcd_init->_lcd_initCGRam
    _lcd_resetSequence->_lcd_ecrireDonnees
    _lcd_initCGRam->_lcd_wrCom
    _lcd_initCGRam->_lcd_wrData
    _lcd_curseurHome->_lcd_wrCom
    _initialisation->_srand
    _initTabVue->___wmul
    _deplace->_lcd_gotoXY
    _afficheTabVue->_lcd_putMessage
    _lcd_putMessage->___wmul
    _lcd_ecritChar->_lcd_wrCom
    _lcd_ecritChar->_lcd_wrData
    _lcd_wrData->_lcd_busy
    _lcd_wrData->_lcd_ecrireDonnees
    _lcd_gotoXY->_lcd_wrCom
    _lcd_effaceAffichage->_lcd_wrCom
    _lcd_wrCom->_lcd_busy
    _lcd_wrCom->_lcd_ecrireDonnees

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   13263
                                             33 COMRAM     3     3      0
                      _afficheTabVue
                            _deplace
                         _initTabVue
                     _initialisation
                    _lcd_curseurHome
                _lcd_effaceAffichage
                           _lcd_init
                   _metToucheCombien
                        _rempliMines
 ---------------------------------------------------------------------------------
 (1) _rempliMines                                         13    11      2    2543
                                             20 COMRAM    13    11      2
                            ___awmod
                             ___wmul
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 2     0      2     370
                                             12 COMRAM     2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     370
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                             14 COMRAM     6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _metToucheCombien                                     7     7      0    3532
                                             22 COMRAM     7     7      0
                             ___wmul
                _calculToucheCombien
 ---------------------------------------------------------------------------------
 (2) _calculToucheCombien                                 16    12      4    1933
                                              6 COMRAM    16    12      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0     738
                      _lcd_initCGRam
                  _lcd_resetSequence
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (2) _lcd_resetSequence                                    1     1      0      22
                                              2 COMRAM     1     1      0
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (2) _lcd_initCGRam                                        4     4      0     560
                                              3 COMRAM     4     4      0
                    _lcd_curseurHome
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_curseurHome                                      0     0      0     156
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (1) _initialisation                                       0     0      0      98
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initTabVue                                           6     6      0    1533
                                              6 COMRAM     6     6      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _deplace                                             10     6      4    1395
                                              5 COMRAM    10     6      4
                          _getAnalog
                         _lcd_gotoXY
 ---------------------------------------------------------------------------------
 (2) _getAnalog                                            2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _afficheTabVue                                        2     2      0    3050
                                              9 COMRAM     2     2      0
                             ___wmul
                _lcd_effaceAffichage
                         _lcd_gotoXY
                     _lcd_putMessage
 ---------------------------------------------------------------------------------
 (2) _lcd_putMessage                                       3     1      2     555
                                              6 COMRAM     3     1      2
                             ___wmul (ARG)
                      _lcd_ecritChar
 ---------------------------------------------------------------------------------
 (3) _lcd_ecritChar                                        2     2      0     313
                                              3 COMRAM     2     2      0
                          _lcd_wrCom
                         _lcd_wrData
 ---------------------------------------------------------------------------------
 (3) _lcd_wrData                                           1     1      0     112
                                              2 COMRAM     1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoXY                                           2     1      1     874
                                              3 COMRAM     2     1      1
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (1) _lcd_effaceAffichage                                  0     0      0     156
                          _lcd_wrCom
 ---------------------------------------------------------------------------------
 (2) _lcd_wrCom                                            1     1      0     156
                                              2 COMRAM     1     1      0
                           _lcd_busy
                  _lcd_ecrireDonnees
                _lcd_strobeEnableBit
 ---------------------------------------------------------------------------------
 (3) _lcd_strobeEnableBit                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcd_ecrireDonnees                                    2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_busy                                             2     2      0      46
                                              0 COMRAM     2     2      0
                    _lcd_lireDonnees
 ---------------------------------------------------------------------------------
 (4) _lcd_lireDonnees                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1375
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _afficheTabVue
     ___wmul
     _lcd_effaceAffichage
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_gotoXY
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_putMessage
       ___wmul (ARG)
       _lcd_ecritChar (ARG)
         _lcd_wrCom
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
         _lcd_wrData
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
   _deplace
     _getAnalog
     _lcd_gotoXY
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
   _initTabVue
     ___wmul
   _initialisation
     _srand
   _lcd_curseurHome
     _lcd_wrCom
       _lcd_busy
         _lcd_lireDonnees
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
   _lcd_effaceAffichage
     _lcd_wrCom
       _lcd_busy
         _lcd_lireDonnees
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
   _lcd_init
     _lcd_initCGRam
       _lcd_curseurHome
         _lcd_wrCom
           _lcd_busy
             _lcd_lireDonnees
           _lcd_ecrireDonnees
           _lcd_strobeEnableBit
       _lcd_wrCom
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
       _lcd_wrData
         _lcd_busy
           _lcd_lireDonnees
         _lcd_ecrireDonnees
         _lcd_strobeEnableBit
     _lcd_resetSequence
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
     _lcd_wrCom
       _lcd_busy
         _lcd_lireDonnees
       _lcd_ecrireDonnees
       _lcd_strobeEnableBit
   _metToucheCombien
     ___wmul
     _calculToucheCombien
       ___wmul
   _rempliMines
     ___awmod
       _rand (ARG)
         ___lmul
     ___wmul
     _rand
       ___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      54       6       32.8%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      94       4       92.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     24      28       1       42.1%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     110      14        0.0%
DATA                 0      0     110      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Nov 28 12:04:12 2019

 __end_of_calculToucheCombien 7BF2                            l73 748C                            l85 77EA  
                          l97 7AAC           ___wmul@multiplicand 0003                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
__size_of_lcd_strobeEnableBit 0008                           l112 7B96                           l105 7978  
                         l220 73DE                           l140 7246                           l124 7D3E  
                         l108 7ABE                           l118 7BF0                           l143 7256  
                         l128 7D3E                           l209 76D6                           l242 71D0  
                         l226 7352                           l146 72E0                           l171 72E6  
                         l172 7312                           l245 722E                           l165 71C8  
                         l173 7318                           l182 72AC                           l191 71E6  
                         l239 74EA                           l168 7208                           l256 7730  
                         l185 7670                           l257 7740                           l194 71D8  
                         l179 75AA                           l188 727E                           l912 7430  
                         l489 789A                           l909 71F4                  __CFG_CPB$OFF 000000  
                         u170 7254                           u171 7250                           u420 7312  
                         u500 7B0C                           u421 730E                           u501 7B08  
                         u430 7586                           u510 7B28                           u431 7582  
                         u511 7B24                           u440 7598                           u520 7B36  
                         u600 77FE                           u441 7594                           u521 7B32  
                         u601 77FA                           u530 7B52                           u610 7818  
                         u450 76F6                  __CFG_CPD$OFF 000000                           u531 7B4E  
                         u611 7814                           u451 76F2                           u540 7B94  
                         u620 7832                           u460 7730                           u700 7A66  
                         u541 7B90                           u621 782E                           u461 772C  
                         u701 7A62                           u470 7352                           u550 7BB6  
                         u630 7850                           u710 7AAC                           u471 734E  
                         u551 7BB2                           u631 784C                           u711 7AA8  
                         u560 7BD6                           u480 7AD4                           u720 78EE  
                         u640 7866                           u561 7BD2                           u481 7AD0  
                         u721 78EA                           u641 7862                           u570 7BE6  
                         u490 7AE6                           u730 7958                           u650 788A  
                         u571 7BE2                           u491 7AE2                           u731 7954  
                         u651 7886                           u660 77A6                           u580 74D4  
                         u740 7978                           u661 77A2                           u581 74D0  
                         u741 7974                           u750 748C                           u670 77EA  
                         u590 74E6                           u751 7488                           u671 77E6  
                         u591 74E2                           u760 7C2A                           u680 79E2  
                         u761 7C26                           u681 79DE                           u770 7C76  
                         u690 7A02                           u771 7C72                           u691 79FE  
                         u827 7536                           u780 7CC2                           u781 7CBE  
                         u837 7618                           u790 7D0E                           u791 7D0A  
                         u847 7630                           u857 7642                           u867 7654  
                         u877 7666                           u887 7570                           u897 759A  
                __CFG_BORV$18 000000                  ___awmod@sign 0014                   lcd_gotoXY@x 0005  
                         wreg 000FE8                   lcd_gotoXY@y 0004  __size_of_lcd_effaceAffichage 000E  
                __CFG_LVP$OFF 000000                          l1200 7244                          l1202 7244  
                        l1204 7254                          l1510 71F8                          l1520 72F8  
                        l1512 72E2                          l1600 71D2                          l1506 71C4  
                        l1530 7314                          l1522 72FA                          l1514 72EA  
                        l1602 7396                          l1524 7302                          l1516 72F6  
                        l1540 7554                          l1604 73A2                          l1612 73C0  
                        l1620 76D8                          l1614 720A                          l1526 7304  
                        l1518 72F8                          l1534 71CA                          l1550 7564  
                        l1542 7554                          l1630 71DA                          l1606 73AC  
                        l1198 7232                          l1710 7612                          l1702 7BEC  
                        l1622 76E8                          l1616 7226                          l1528 7304  
                        l1560 7586                          l1552 7564                          l1544 7556  
                        l1536 754C                          l1640 76A2                          l1632 7674  
                        l1608 73B6                          l1720 762E                          l1712 7620  
                        l1800 7892                          l1624 76F6                          l1562 7598  
                        l1554 756A                          l1546 7558                          l1538 7550  
                        l1634 7678                          l1650 7334                          l1706 71E8  
                        l1810 72C2                          l1730 764E                          l1722 7636  
                        l1714 7622                          l1626 7706                          l1564 75A2  
                        l1556 756E                          l1548 7560                          l1636 7686  
                        l1644 76B0                          l1580 728C                          l1572 7282  
                        l1652 7336                          l1820 72D8                          l1812 72CE  
                        l1804 72AE                          l1740 766C                          l1732 7652  
                        l1724 763C                          l1716 7624                          l1708 760E  
                        l1900 78EE                          l1628 7710                          l1566 75A6  
                        l1558 7576                          l1638 7694                          l1590 72A0  
                        l1582 728E                          l1574 7286                          l1646 731A  
                        l1910 7432                          l1822 72DC                          l1814 72D0  
                        l1806 72B6                          l1750 7498                          l1742 748E  
                        l1734 765A                          l1726 7640                          l1718 762A  
                        l1662 7AAE                          l1902 7938                          l1654 73E0  
                        l1568 75A6                          l1592 72A4                          l1584 7296  
                        l1576 728A                          l1648 7322                          l1920 7448  
                        l1912 7436                          l1840 7752                          l1816 72D2  
                        l1808 72C0                          l1760 74C4                          l1744 7494  
                        l1736 7660                          l1728 7648                          l1824 7258  
                        l1680 7B0C                          l1664 7ABA                          l1904 793C  
                        l1656 7414                          l1594 72A4                          l1586 729A  
                        l1578 728A                          l1922 746C                          l1930 7C2A  
                        l1850 77CE                          l1842 7786                          l1834 774A  
                        l1818 72D6                          l1762 74D4                          l1738 7664  
                        l1826 727A                          l1690 7B9A                          l1682 7B28  
                        l1674 7AC2                          l1906 7958                          l1770 77F0  
                        l1658 7424                          l1596 72A8                          l1588 729A  
                        l1924 7470                          l1940 7CA6                          l1932 7C34  
                        l1844 778A                          l1828 7742                          l1764 74D6  
                        l1756 749C                          l1692 7BB6                          l1684 7B36  
                        l1676 7AD4                          l1908 795C                          l1780 7820  
                        l1772 77FE                          l1852 797A                          l1918 743E  
                        l1950 7D18                          l1942 7CC2                          l1934 7C5A  
                        l1926 7BF2                          l1846 77A6                          l1766 74E6  
                        l1758 74C2                          l1694 7BBA                          l1686 7B52  
                        l1678 7AE6                          l1790 7866                          l1782 7832  
                        l1774 7806                          l1870 79E2                          l1944 7CCC  
                        l1936 7C76                          l1928 7C0E                          l1848 77CA  
                        l1696 7BD6                          l1688 7B94                          l1792 786E  
                        l1784 783A                          l1776 780A                          l1768 77EC  
                        l1880 7A66                          l1872 79E6                          l1864 798E  
                        l1960 74EC                          l1946 7CF2                          l1938 7C80  
                        l1698 7BE6                          l1794 7874                          l1786 7842  
                        l1778 7818                          l1882 7A8A                          l1874 7A02  
                        l1866 79C2                          l1858 7986                          l1970 7504  
                        l1962 74F4                          l1948 7D0E                          l1892 78A4  
                        l1788 7850                          l1796 787A                          l1876 7A0E  
                        l1884 7A8E                          l1868 79C6                          l1980 7530  
                        l1972 7508                          l1964 74F8                          l1886 789C  
                        l1798 788A                          l1878 7A34                          l1974 7514  
                        l1966 74FC                          l1976 7518                          l1968 7500  
                        l1898 78AC                          l1978 751C                          _TMR1 000FCE  
            ??_initialisation 0003                          _main 74EC                          _rand 73E0  
                        fsr2h 000FDA                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                          prodh 000FF4                          prodl 000FF3  
                        start 0000               ?_lcd_putMessage 0007                 __CFG_IESO$OFF 000000  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000               ??_lcd_ecritChar 0004  
                       ?_main 0001                         ?_rand 000D               __end_of___awmod 789C  
                       _ANSEL 000F7E                         _PORTD 000F83                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISD 000F95                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
             __end_of_deplace 7D40           ___lmul@multiplicand 0005                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
             ??_lcd_initCGRam 0004                         _randx 0025                         _srand 71E8  
                       main@x 0023                         main@y 0024                         tablat 000FF5  
                       status 000FD8                __CFG_HFOFST$ON 000000                __CFG_PBADEN$ON 000000  
            _metToucheCombien 789C               __initialization 75AC                  __end_of_main 754A  
                __end_of_rand 7432          lcd_putMessage@chaine 0007    calculToucheCombien@colonne 0009  
                      ??_main 0022                        ??_rand 000F                 __activetblptr 000002  
                      _ADCON1 000FC1                        _ADRESH 000FC4                        ?_srand 0001  
                      _ANSELH 000F7F                   initTabVue@i 000B                   initTabVue@j 0009  
              __CFG_WDTEN$OFF 000000                  ?_rempliMines 0015                __CFG_XINST$OFF 000000  
              lcd_initCGRam@i 0006                lcd_initCGRam@j 0007                getAnalog@canal 0002  
            __end_of_lcd_busy 731A              __end_of_lcd_init 7280                        ___lmul 76D8  
                      ___wmul 720A                __CFG_STVREN$ON 000000                     ??___awmod 0013  
              rempliMines@col 001C                        clear_0 75F2                        clear_1 75FE  
             ___awmod@divisor 0011                     ??_deplace 000A               ___awmod@counter 0013  
                __pdataCOMRAM 0025                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                        srand@x 0001        __size_of_afficheTabVue 005C  
           _lcd_resetSequence 760E                    __accesstop 0060       __end_of__initialization 7604  
         _lcd_strobeEnableBit 71CA            ?_lcd_resetSequence 0001                 ___rparam_used 000001  
              __pcstackCOMRAM 0001           _lcd_effaceAffichage 71DA                  __pidataBANK0 7354  
         ??_lcd_resetSequence 0003                 __end_of_srand 71F6          ?_lcd_strobeEnableBit 0001  
          __size_of_getAnalog 0028          ?_lcd_effaceAffichage 0001            __size_of_lcd_wrCom 0062  
   __end_of_lcd_resetSequence 7672                       ??_srand 0003      __size_of_lcd_lireDonnees 0006  
           _lcd_ecrireDonnees 71F6                    __pbssBANK0 0060                    __pbssBANK1 0100  
            ??_lcd_putMessage 0009            ?_lcd_ecrireDonnees 0001      __size_of_lcd_curseurHome 0008  
         ??_lcd_ecrireDonnees 0001                       ?___lmul 0001                       ?___wmul 0001  
               _afficheTabVue 7432                ___lmul@product 0009         ??_lcd_strobeEnableBit 0001  
__size_of_calculToucheCombien 0144      __end_of_metToucheCombien 797A                    _lcd_gotoXY 7672  
       ??_lcd_effaceAffichage 0004                    _lcd_wrData 7280     __end_of_lcd_ecrireDonnees 720A  
                   ?_lcd_busy 0001                     ?_lcd_init 0001       lcd_ecrireDonnees@donnee 0002  
                  _m_tabMines 0060             __end_of_getAnalog 7258          __size_of_rempliMines 0134  
                     __Hparam 0000                       __Lparam 0000                    _initTabVue 7742  
           __end_of_lcd_wrCom 75AC                ?_afficheTabVue 0001               __size_of___lmul 006A  
                     ___awmod 77EC               __size_of___wmul 0026                       __pcinit 75AC  
                   _ANSELbits 000F7E                       __ramtop 0600                       _deplace 7BF2  
                     __ptext0 74EC                       __ptext1 797A                       __ptext2 73E0  
                     __ptext3 76D8                       __ptext4 77EC                       __ptext5 789C  
                     __ptext6 7AAE                       __ptext7 7258                       __ptext8 760E  
                     __ptext9 748E         __end_of_lcd_ecritChar 73E0               lcd_busy@adresse 0002  
                   _T1CONbits 000FCD              ___awmod@dividend 000F              lcd_ecritChar@car 0004  
                  ??_lcd_busy 0001                    ??_lcd_init 0008    __size_of_lcd_resetSequence 0064  
        end_of_initialization 7604         __end_of_lcd_initCGRam 74EC                 __Lmediumconst 0000  
           ??_lcd_lireDonnees 0001                       postdec1 000FE5                       postinc0 000FEE  
                     postinc2 000FDE       __size_of_initialisation 0034             ??_lcd_curseurHome 0004  
         lcd_ecritChar@posRam 0005                     _PORTAbits 000F80                   ?_lcd_gotoXY 0004  
                 ?_lcd_wrData 0001    __size_of_lcd_ecrireDonnees 0014               ??_afficheTabVue 000A  
                 ?_initTabVue 0001                __end_of___lmul 7742                __end_of___wmul 7230  
               __pidataCOMRAM 71C0           start_initialization 75AC           _calculToucheCombien 7AAE  
         __size_of_lcd_gotoXY 0066                      ??___lmul 0009                      ??___wmul 0005  
               rempliMines@nb 0015           __size_of_lcd_wrData 002E                   __pdataBANK0 00B4  
            __CFG_LPT1OSC$OFF 000000          ?_calculToucheCombien 0007             ?_metToucheCombien 0001  
         __size_of_initTabVue 00AA            ??_metToucheCombien 0017             __size_of_lcd_busy 0038  
           __size_of_lcd_init 0028             __CFG_CCP2MX$PORTC 000000                     _getAnalog 7230  
 __end_of_lcd_strobeEnableBit 71D2                _initialisation 72AE                      ?___awmod 000F  
                    ?_deplace 0006   __end_of_lcd_effaceAffichage 71E8                     _lcd_wrCom 754A  
       ??_calculToucheCombien 000B               _lcd_lireDonnees 71C4           lcd_wrData@caractere 0003  
              __size_of_srand 000E                 ??_rempliMines 0017               _lcd_curseurHome 71D2  
              ___wmul@product 0005                     deplace@aX 000C                     deplace@aY 000E  
                   deplace@px 0006                     deplace@py 0008        __end_of_initialisation 72E2  
                  ?_getAnalog 0001              __CFG_WDTPS$32768 000000       __size_of_lcd_putMessage 003A  
                  ?_lcd_wrCom 0001                    _ADCON0bits 000FC2                    _ADCON2bits 000FC0  
           ___wmul@multiplier 0001                  ??_lcd_gotoXY 0005                  ??_lcd_wrData 0003  
           lcd_wrCom@commande 0003             ___lmul@multiplier 0001                     copy_data0 75C0  
                   copy_data1 75E0        __size_of_lcd_ecritChar 004C                      __Hrparam 0000  
             ?_initialisation 0001           __end_of_rempliMines 7AAE                      __Lrparam 0000  
                ??_initTabVue 0007            __CFG_BOREN$SBORDIS 000000                  rempliMines@i 001E  
                rempliMines@j 0020            __end_of_lcd_gotoXY 76D8            __end_of_lcd_wrData 72AE  
            __size_of___awmod 00B0        __size_of_lcd_initCGRam 005E               lcd_putMessage@j 0009  
            __size_of_deplace 014E       __end_of_lcd_lireDonnees 71CA                      _matCGRAM 00B4  
     __end_of_lcd_curseurHome 71DA                      __ptext10 71D2                      __ptext11 72AE  
                    __ptext20 7672                      __ptext12 71E8                      __ptext21 71DA  
                    __ptext13 7742                      __ptext22 754A                      __ptext14 7BF2  
                    __ptext23 71CA                      __ptext15 7230                      __ptext24 71F6  
                    __ptext16 7432                      __ptext25 72E2                      __ptext17 731A  
                    __ptext26 71C4                      __ptext18 7394                      __ptext27 720A  
                    __ptext19 7280             metToucheCombien@i 001A             metToucheCombien@j 001C  
                    _lcd_busy 72E2                      _lcd_init 7258            __end_of_initTabVue 77EC  
            rempliMines@i_299 001A      calculToucheCombien@ligne 0007                      _m_tabVue 0100  
    calculToucheCombien@total 000E              rempliMines@ligne 001D                 __size_of_main 005E  
               __size_of_rand 0052                   ??_getAnalog 0001         __end_of_afficheTabVue 748E  
                 ??_lcd_wrCom 0003                 _lcd_ecritChar 7394                afficheTabVue@i 000A  
               _lcd_initCGRam 748E                   _rempliMines 797A          calculToucheCombien@i 0013  
        calculToucheCombien@j 0015          calculToucheCombien@x 000F          calculToucheCombien@y 0011  
   __size_of_metToucheCombien 00DE                _lcd_putMessage 731A                ?_lcd_ecritChar 0001  
            ?_lcd_lireDonnees 0001              ?_lcd_curseurHome 0001                ?_lcd_initCGRam 0001  
           __CFG_FOSC$INTIO67 000000        __end_of_lcd_putMessage 7354  
